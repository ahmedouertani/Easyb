import { Component, ElementRef, Input, ViewChild, Renderer2, } from '@angular/core';
export class ProgressComponent {
    constructor(elRef, renderer) {
        this.elRef = elRef;
        this.renderer = renderer;
        this.text = '';
        this.color = 'dark';
        this.height = 10;
        this.max = 100;
        this.min = 0;
        this.value = 0;
    }
    ngOnInit() { }
    ngAfterViewInit() {
        this.percent = ((this.value - this.min) / (this.max - this.min)) * 100;
        this.renderer.setStyle(this.progress.nativeElement, 'height', `${this.height}px`);
        this.renderer.setStyle(this.progressBar.nativeElement, 'width', `${this.percent}%`);
        this.renderer.setStyle(this.progressBar.nativeElement, 'height', `${this.height}px`);
        // this.renderer.addClass(this.elRef.nativeElement, 'CDBProgress-container');
        this.renderer.setStyle(this.elRef.nativeElement, 'display', 'block');
        this.renderer.setStyle(this.elRef.nativeElement, 'width', '100%');
        if (this.class) {
            let classes = this.class.split(' ');
            classes.forEach((className) => {
                this.renderer.addClass(this.progress.nativeElement, className);
            });
        }
        if (this.barClass) {
            let classes = this.class.split(' ');
            classes.forEach((className) => {
                this.renderer.addClass(this.progressBar.nativeElement, className);
            });
        }
        if (this.color === 'primary') {
            this.renderer.addClass(this.progress.nativeElement, 'CDBProgress-primary');
            this.renderer.addClass(this.progressBar.nativeElement, this.color);
            this.renderer.addClass(this.progressText.nativeElement, 'progress-text-primary');
        }
        if (this.color === 'secondary') {
            this.renderer.addClass(this.progress.nativeElement, 'CDBProgress-secondary');
            this.renderer.addClass(this.progressBar.nativeElement, this.color);
            this.renderer.addClass(this.progressText.nativeElement, 'progress-text-secondary');
        }
        if (this.color === 'success') {
            this.renderer.addClass(this.progress.nativeElement, 'CDBProgress-success');
            this.renderer.addClass(this.progressBar.nativeElement, this.color);
            this.renderer.addClass(this.progressText.nativeElement, 'progress-text-success');
        }
        if (this.color === 'danger') {
            this.renderer.addClass(this.progress.nativeElement, 'CDBProgress-danger');
            this.renderer.addClass(this.progressBar.nativeElement, this.color);
            this.renderer.addClass(this.progressText.nativeElement, 'progress-text-danger');
        }
        if (this.color === 'warning') {
            this.renderer.addClass(this.progress.nativeElement, 'CDBProgress-warning');
            this.renderer.addClass(this.progressBar.nativeElement, this.color);
            this.renderer.addClass(this.progressText.nativeElement, 'progress-text-warning');
        }
        if (this.color === 'info') {
            this.renderer.addClass(this.progress.nativeElement, 'CDBProgress-info');
            this.renderer.addClass(this.progressBar.nativeElement, this.color);
            this.renderer.addClass(this.progressText.nativeElement, 'progress-text-info');
        }
        if (this.color === 'dark') {
            this.renderer.addClass(this.progressBar.nativeElement, this.color);
        }
    }
}
ProgressComponent.decorators = [
    { type: Component, args: [{
                selector: 'CDBProgress',
                template: "<div #progressText class=\"progress-text\">{{ text }}</div>\n<div #progress class=\"progress CDBProgress-default\">\n    <div #progressBar class=\"progress-bar\" role=\"progressbar\">\n    </div>\n</div>",
                styles: [".primary{background-color:#276ef1;border-color:#276ef1;box-sizing:border-box;color:#fff}.primary:hover{background-color:rgba(39,110,241,.7411764705882353);color:#fff}.secondary{background-color:#7356bf;border-color:#7356bf;color:#fff}.secondary:hover{background-color:rgba(115,86,191,.7411764705882353);color:#fff}.success{background-color:#05944f;border-color:#05944f;color:#fff}.success:hover{background-color:rgba(5,148,79,.7411764705882353);color:#fff}.danger{background-color:#e11900;border-color:#e11900;color:#fff}.danger:hover{background-color:rgba(225,25,0,.7411764705882353);color:#fff}.warning{background-color:#ffe975;border-color:#ffe975;color:#66512c}.warning:hover{background-color:rgba(255,233,117,.7411764705882353);color:#66512c}.dark{background-color:#000;border-color:#000;color:#fff}.dark:hover{background-color:rgba(0,0,0,.7411764705882353);color:#fff}.light{background-color:#eee;border-color:#eee;color:#000}.light:hover{background-color:hsla(0,0%,93.3%,.7411764705882353);color:#000}.white{background-color:#fff;border-color:#fff;color:#000}.white:hover{background-color:hsla(0,0%,100%,.8352941176470589);color:#000}.info{background-color:#17a2b8;border-color:#17a2b8;color:#fff}.info:hover{background-color:rgba(23,162,184,.7411764705882353);color:#fff}.CDBProgress-default{background:rgba(0,0,0,.1568627450980392);border-radius:20px;width:100%}.progress-bar{border-radius:20px}.CDBProgress-primary{background:rgba(62,152,199,.1568627450980392)!important}.CDBProgress-secondary{background:rgba(115,86,191,.1568627450980392)!important}.CDBProgress-danger{background:rgba(225,25,0,.1568627450980392)!important}.CDBProgress-warning{background:rgba(102,81,44,.1568627450980392)!important}.CDBProgress-info{background:rgba(23,162,184,.1568627450980392)!important}.CDBProgress-success{background:rgba(5,148,79,.1568627450980392)!important}.progress-text{color:#000;display:flex;justify-content:center;width:100%}.progress-text-primary{color:#3e98c7!important}.progress-text-secondary{color:#867d9c!important}.progress-text-danger{color:#e11900!important}.progress-text-warning{color:#66512c!important}.progress-text-info{color:#17a2b8!important}.progress-text-success{color:#05944f!important}"]
            },] }
];
ProgressComponent.ctorParameters = () => [
    { type: ElementRef },
    { type: Renderer2 }
];
ProgressComponent.propDecorators = {
    barClass: [{ type: Input }],
    class: [{ type: Input }],
    text: [{ type: Input }],
    color: [{ type: Input }],
    height: [{ type: Input }],
    max: [{ type: Input }],
    min: [{ type: Input }],
    value: [{ type: Input }],
    progressText: [{ type: ViewChild, args: ['progressText',] }],
    progress: [{ type: ViewChild, args: ['progress',] }],
    progressBar: [{ type: ViewChild, args: ['progressBar',] }]
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHJvZ3Jlc3MuY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6Ii9Vc2Vycy9hcHBsZS9Eb2N1bWVudHMvcHJvamVjdHMvcHJvamVjdF9kZXZ3YXJlcy9Db250cmFzdC1Cb290c3RyYXAtQW5ndWxhci9wcm9qZWN0cy9uZy1jZGJhbmd1bGFyL3NyYy8iLCJzb3VyY2VzIjpbImxpYi9jb21wb25lbnRzL3Byb2dyZXNzL3Byb2dyZXNzLmNvbXBvbmVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQ0wsU0FBUyxFQUNULFVBQVUsRUFDVixLQUFLLEVBRUwsU0FBUyxFQUVULFNBQVMsR0FDVixNQUFNLGVBQWUsQ0FBQztBQU92QixNQUFNLE9BQU8saUJBQWlCO0lBMEI1QixZQUFvQixLQUFpQixFQUFVLFFBQW1CO1FBQTlDLFVBQUssR0FBTCxLQUFLLENBQVk7UUFBVSxhQUFRLEdBQVIsUUFBUSxDQUFXO1FBdkJ6RCxTQUFJLEdBQVcsRUFBRSxDQUFDO1FBQ2xCLFVBQUssR0FPRCxNQUFNLENBQUM7UUFFWCxXQUFNLEdBQVcsRUFBRSxDQUFDO1FBQ3BCLFFBQUcsR0FBVyxHQUFHLENBQUM7UUFDbEIsUUFBRyxHQUFXLENBQUMsQ0FBQztRQUNoQixVQUFLLEdBQVcsQ0FBQyxDQUFDO0lBVTBDLENBQUM7SUFFdEUsUUFBUSxLQUFJLENBQUM7SUFFYixlQUFlO1FBQ2IsSUFBSSxDQUFDLE9BQU8sR0FBRyxDQUFDLENBQUMsSUFBSSxDQUFDLEtBQUssR0FBRyxJQUFJLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsR0FBRyxHQUFHLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQyxHQUFHLEdBQUcsQ0FBQztRQUN2RSxJQUFJLENBQUMsUUFBUSxDQUFDLFFBQVEsQ0FDcEIsSUFBSSxDQUFDLFFBQVEsQ0FBQyxhQUFhLEVBQzNCLFFBQVEsRUFDUixHQUFHLElBQUksQ0FBQyxNQUFNLElBQUksQ0FDbkIsQ0FBQztRQUNGLElBQUksQ0FB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LFlBQVksQ0FBQyxhQUFhLEVBQy9CLG9CQUFvQixDQUNyQixDQUFDO1NBQ0g7UUFFRCxJQUFJLElBQUksQ0FBQyxLQUFLLEtBQUssTUFBTSxFQUFFO1lBQ3pCLElBQUksQ0FBQyxRQUFRLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxXQUFXLENBQUMsYUFBYSxFQUFFLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQztTQUNwRTtJQUNILENBQUM7OztZQTVJRixTQUFTLFNBQUM7Z0JBQ1QsUUFBUSxFQUFFLGFBQWE7Z0JBQ3ZCLHVOQUF3Qzs7YUFFekM7OztZQVpDLFVBQVU7WUFLVixTQUFTOzs7dUJBU1IsS0FBSztvQkFDTCxLQUFLO21CQUNMLEtBQUs7b0JBQ0wsS0FBSztxQkFTTCxLQUFLO2tCQUNMLEtBQUs7a0JBQ0wsS0FBSztvQkFDTCxLQUFLOzJCQU1MLFNBQVMsU0FBQyxjQUFjO3VCQUN4QixTQUFTLFNBQUMsVUFBVTswQkFDcEIsU0FBUyxTQUFDLGFBQWEiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge1xuICBDb21wb25lbnQsXG4gIEVsZW1lbnRSZWYsXG4gIElucHV0LFxuICBPbkluaXQsXG4gIFZpZXdDaGlsZCxcbiAgQWZ0ZXJWaWV3SW5pdCxcbiAgUmVuZGVyZXIyLFxufSBmcm9tICdAYW5ndWxhci9jb3JlJztcblxuQENvbXBvbmVudCh7XG4gIHNlbGVjdG9yOiAnQ0RCUHJvZ3Jlc3MnLFxuICB0ZW1wbGF0ZVVybDogJy4vcHJvZ3Jlc3MuY29tcG9uZW50Lmh0bWwnLFxuICBzdHlsZVVybHM6IFsnLi9wcm9ncmVzcy5jb21wb25lbnQuc2NzcyddLFxufSlcbmV4cG9ydCBjbGFzcyBQcm9ncmVzc0NvbXBvbmVudCBpbXBsZW1lbnRzIE9uSW5pdCwgQWZ0ZXJWaWV3SW5pdCB7XG4gIEBJbnB1dCgpIGJhckNsYXNzOiBzdHJpbmc7XG4gIEBJbnB1dCgpIGNsYXNzOiBzdHJpbmc7XG4gIEBJbnB1dCgpIHRleHQ6IHN0cmluZyA9ICcnO1xuICBASW5wdXQoKSBjb2xvcjpcbiAgICB8ICdwcmltYXJ5J1xuICAgIHwgJ3NlY29uZGFyeSdcbiAgICB8ICdzdWNjZXNzJ1xuICAgIHwgJ2RhbmdlcidcbiAgICB8ICd3YXJuaW5nJ1xuICAgIHwgJ2luZm8nXG4gICAgfCAnZGFyaycgPSAnZGFyayc7XG5cbiAgQElucHV0KCkgaGVpZ2h0OiBudW1iZXIgPSAxMDtcbiAgQElucHV0KCkgbWF4OiBudW1iZXIgPSAxMDA7XG4gIEBJbnB1dCgpIG1pbjogbnVtYmVyID0gMDtcbiAgQElucHV0KCkgdmFsdWU6IG51bWJlciA9IDA7XG5cbiAgcGVyY2VudDtcbiAgcHJvZ3Jlc3NTdHlsZTogc3RyaW5nO1xuICBwcm9ncmVzc0JhclN0eWxlOiBzdHJpbmc7XG5cbiAgQFZpZXdDaGlsZCgncHJvZ3Jlc3NUZXh0JykgcHJvZ3Jlc3NUZXh0OiBFbGVtZW50UmVmO1xuICBAVmlld0NoaWxkKCdwcm9ncmVzcycpIHByb2dyZXNzOiBFbGVtZW50UmVmO1xuICBAVmlld0NoaWxkKCdwcm9ncmVzc0JhcicpIHByb2dyZXNzQmFyOiBFbGVtZW50UmVmO1xuXG4gIGNvbnN0cnVjdG9yKHByaXZhdGUgZWxSZWY6IEVsZW1lbnRSZWYsIHByaXZhdGUgcmVuZGVyZXI6IFJlbmRlcmVyMikge31cblxuICBuZ09uSW5pdCgpIHt9XG5cbiAgbmdBZnRlclZpZXdJbml0KCkge1xuICAgIHRoaXMucGVyY2VudCA9ICgodGhpcy52YWx1ZSAtIHRoaXMubWluKSAvICh0aGlzLm1heCAtIHRoaXMubWluKSkgKiAxMDA7XG4gICAgdGhpcy5yZW5kZXJlci5zZXRTdHlsZShcbiAgICAgIHRoaXMucHJvZ3Jlc3MubmF0aXZlRWxlbWVudCxcbiAgICAgICdoZWlnaHQnLFxuICAgICAgYCR7dGhpcy5oZWlnaHR9cHhgXG4gICAgKTtcbiAgICB0aGlzLnJlbmRlcmVyLnNldFN0eWxlKFxuICAgICAgdGhpcy5wcm9ncmVzc0Jhci5uYXRpdmVFbGVtZW50LFxuICAgICAgJ3dpZHRoJyxcbiAgICAgIGAke3RoaXMucGVyY2VudH0lYFxuICAgICk7XG4gICAgdGhpcy5yZW5kZXJlci5zZXRTdHlsZShcbiAgICAgIHRoaXMucHJvZ3Jlc3NCYXIubmF0aXZlRWxlbWVudCxcbiAgICAgICdoZWlnaHQnLFxuICAgICAgYCR7dGhpcy5oZWlnaHR9cHhgXG4gICAgKTtcblxuICAgIC8vIHRoaXMucmVuZGVyZXIuYWRkQ2xhc3ModGhpcy5lbFJlZi5uYXRpdmVFbGVtZW50LCAnQ0RCUHJvZ3Jlc3MtY29udGFpbmVyJyk7XG4gICAgdGhpcy5yZW5kZXJlci5zZXRTdHlsZSh0aGlzLmVsUmVmLm5hdGl2ZUVsZW1lbnQsICdkaXNwbGF5JywgJ2Jsb2NrJyk7XG4gICAgdGhpcy5yZW5kZXJlci5zZXRTdHlsZSh0aGlzLmVsUmVmLm5hdGl2ZUVsZW1lbnQsICd3aWR0aCcsICcxMDAlJyk7XG5cbiAgICBpZiAodGhpcy5jbGFzcykge1xuICAgICAgbGV0IGNsYXNzZXMgPSB0aGlzLmNsYXNzLnNwbGl0KCcgJyk7XG4gICAgICBjbGFzc2VzLmZvckVhY2goKGNsYXNzTmFtZSkgPT4ge1xuICAgICAgICB0aGlzLnJlbmRlcmVyLmFkZENsYXNzKHRoaXMucHJvZ3Jlc3MubmF0aXZlRWxlbWVudCwgY2xhc3NOYW1lKTtcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIGlmICh0aGlzLmJhckNsYXNzKSB7XG4gICAgICBsZXQgY2xhc3NlcyA9IHRoaXMuY2xhc3Muc3BsaXQoJyAnKTtcbiAgICAgIGNsYXNzZXMuZm9yRWFjaCgoY2xhc3NOYW1lKSA9PiB7XG4gICAgICAgIHRoaXMucmVuZGVyZXIuYWRkQ2xhc3ModGhpcy5wcm9ncmVzc0Jhci5uYXRpdmVFbGVtZW50LCBjbGFzc05hbWUpO1xuICAgICAgfSk7XG4gICAgfVxuXG4gICAgaWYgKHRoaXMuY29sb3IgPT09ICdwcmltYXJ5Jykge1xuICAgICAgdGhpcy5yZW5kZXJlci5hZGRDbGFzcyhcbiAgICAgICAgdGhpcy5wcm9ncmVzcy5uYXRpdmVFbGVtZW50LFxuICAgICAgICAnQ0RCUHJvZ3Jlc3MtcHJpbWFyeSdcbiAgICAgICk7XG4gICAgICB0aGlzLnJlbmRlcmVyLmFkZENsYXNzKHRoaXMucHJvZ3Jlc3NCYXIubmF0aXZlRWxlbWVudCwgdGhpcy5jb2xvcik7XG4gICAgICB0aGlzLnJlbmRlcmVyLmFkZENsYXNzKFxuICAgICAgICB0aGlzLnByb2dyZXNzVGV4dC5uYXRpdmVFbGVtZW50LFxuICAgICAgICAncHJvZ3Jlc3MtdGV4dC1wcmltYXJ5J1xuICAgICAgKTtcbiAgICB9XG5cbiAgICBpZiAodGhpcy5jb2xvciA9PT0gJ3NlY29uZGFyeScpIHtcbiAgICAgIHRoaXMucmVuZGVyZXIuYWRkQ2xhc3MoXG4gICAgICAgIHRoaXMucHJvZ3Jlc3MubmF0aXZlRWxlbWVudCxcbiAgICAgICAgJ0NEQlByb2dyZXNzLXNlY29uZGFyeSdcbiAgICAgICk7XG4gICAgICB0aGlzLnJlbmRlcmVyLmFkZENsYXNzKHRoaXMucHJvZ3Jlc3NCYXIubmF0aXZlRWxlbWVudCwgdGhpcy5jb2xvcik7XG4gICAgICB0aGlzLnJlbmRlcmVyLmFkZENsYXNzKFxuICAgICAgICB0aGlzLnByb2dyZXNzVGV4dC5uYXRpdmVFbGVtZW50LFxuICAgICAgICAncHJvZ3Jlc3MtdGV4dC1zZWNvbmRhcnknXG4gICAgICApO1xuICAgIH1cblxuICAgIGlmICh0aGlzLmNvbG9yID09PSAnc3VjY2VzcycpIHtcbiAgICAgIHRoaXMucmVuZGVyZXIuYWRkQ2xhc3MoXG4gICAgICAgIHRoaXMucHJvZ3Jlc3MubmF0aXZlRWxlbWVudCxcbiAgICAgICAgJ0NEQlByb2dyZXNzLXN1Y2Nlc3MnXG4gICAgICApO1xuICAgICAgdGhpcy5yZW5kZXJlci5hZGRDbGFzcyh0aGlzLnByb2dyZXNzQmFyLm5hdGl2ZUVsZW1lbnQsIHRoaXMuY29sb3IpO1xuICAgICAgdGhpcy5yZW5kZXJlci5hZGRDbGFzcyhcbiAgICAgICAgdGhpcy5wcm9ncmVzc1RleHQubmF0aXZlRWxlbWVudCxcbiAgICAgICAgJ3Byb2dyZXNzLXRleHQtc3VjY2VzcydcbiAgICAgICk7XG4gICAgfVxuXG4gICAgaWYgKHRoaXMuY29sb3IgPT09ICdkYW5nZXInKSB7XG4gICAgICB0aGlzLnJlbmRlcmVyLmFkZENsYXNzKHRoaXMucHJvZ3Jlc3MubmF0aXZlRWxlbWVudCwgJ0NEQlByb2dyZXNzLWRhbmdlcicpO1xuICAgICAgdGhpcy5yZW5kZXJlci5hZGRDbGFzcyh0aGlzLnByb2dyZXNzQmFyLm5hdGl2ZUVsZW1lbnQsIHRoaXMuY29sb3IpO1xuICAgICAgdGhpcy5yZW5kZXJlci5hZGRDbGFzcyhcbiAgICAgICAgdGhpcy5wcm9ncmVzc1RleHQubmF0aXZlRWxlbWVudCxcbiAgICAgICAgJ3Byb2dyZXNzLXRleHQtZGFuZ2VyJ1xuICAgICAgKTtcbiAgICB9XG5cbiAgICBpZiAodGhpcy5jb2xvciA9PT0gJ3dhcm5pbmcnKSB7XG4gICAgICB0aGlzLnJlbmRlcmVyLmFkZENsYXNzKFxuICAgICAgICB0aGlzLnByb2dyZXNzLm5hdGl2ZUVsZW1lbnQsXG4gICAgICAgICdDREJQcm9ncmVzcy13YXJuaW5nJ1xuICAgICAgKTtcbiAgICAgIHRoaXMucmVuZGVyZXIuYWRkQ2xhc3ModGhpcy5wcm9ncmVzc0Jhci5uYXRpdmVFbGVtZW50LCB0aGlzLmNvbG9yKTtcbiAgICAgIHRoaXMucmVuZGVyZXIuYWRkQ2xhc3MoXG4gICAgICAgIHRoaXMucHJvZ3Jlc3NUZXh0Lm5hdGl2ZUVsZW1lbnQsXG4gICAgICAgICdwcm9ncmVzcy10ZXh0LXdhcm5pbmcnXG4gICAgICApO1xuICAgIH1cblxuICAgIGlmICh0aGlzLmNvbG9yID09PSAnaW5mbycpIHtcbiAgICAgIHRoaXMucmVuZGVyZXIuYWRkQ2xhc3ModGhpcy5wcm9ncmVzcy5uYXRpdmVFbGVtZW50LCAnQ0RCUHJvZ3Jlc3MtaW5mbycpO1xuICAgICAgdGhpcy5yZW5kZXJlci5hZGRDbGFzcyh0aGlzLnByb2dyZXNzQmFyLm5hdGl2ZUVsZW1lbnQsIHRoaXMuY29sb3IpO1xuICAgICAgdGhpcy5yZW5kZXJlci5hZGRDbGFzcyhcbiAgICAgICAgdGhpcy5wcm9ncmVzc1RleHQubmF0aXZlRWxlbWVudCxcbiAgICAgICAgJ3Byb2dyZXNzLXRleHQtaW5mbydcbiAgICAgICk7XG4gICAgfVxuXG4gICAgaWYgKHRoaXMuY29sb3IgPT09ICdkYXJrJykge1xuICAgICAgdGhpcy5yZW5kZXJlci5hZGRDbGFzcyh0aGlzLnByb2dyZXNzQmFyLm5hdGl2ZUVsZW1lbnQsIHRoaXMuY29sb3IpO1xuICAgIH1cbiAgfVxufVxuIl19