import { Component, ElementRef, Input, Renderer2, ViewChild, ViewEncapsulation, } from '@angular/core';
export class BreadcrumbComponent {
    constructor(elRef, renderer) {
        this.elRef = elRef;
        this.renderer = renderer;
    }
    ngOnInit() {
        this.renderer.removeAttribute(this.elRef.nativeElement, 'class');
        this.renderer.removeAttribute(this.elRef.nativeElement, 'style');
    }
    ngAfterViewInit() {
        if (this.bold === true) {
            this.renderer.addClass(this.ol.nativeElement, 'CDBBreadcrumb-bold');
        }
        if (this.light === true) {
            this.renderer.addClass(this.ol.nativeElement, 'CDBBreadcrumb-light');
        }
        if (this.uppercase === true) {
            this.renderer.addClass(this.ol.nativeElement, 'CDBBreadcrumb-uppercase');
        }
        if (this.circle === true) {
            this.renderer.addClass(this.ol.nativeElement, 'CDBBreadcrumb-circle');
        }
    }
}
BreadcrumbComponent.decorators = [
    { type: Component, args: [{
                selector: 'CDBBreadcrumb',
                template: "<nav>\n    <ol #ol class=\"CDBBreadcrumb-default breadcrumb {{ class }}\" [style]=\"style\">\n        <ng-content></ng-content>\n    </ol>\n</nav>",
                encapsulation: ViewEncapsulation.None,
                styles: [".CDBBreadcrumb-default{-moz-border-radius:0;-ms-border-radius:0;-o-border-radius:0;-webkit-border-radius:0;border-radius:0;text-transform:capitalize}.CDBBreadcrumb-default a{display:unset!important}.CDBBreadcrumb-bold{font-weight:700}.CDBBreadcrumb-light{font-weight:light}.CDBBreadcrumb-circle{-moz-border-radius:50px;-ms-border-radius:50px;-o-border-radius:50px;-webkit-border-radius:50px;border-radius:50px}.CDBBreadcrumb-uppercase{text-transform:uppercase}"]
            },] }
];
BreadcrumbComponent.ctorParameters = () => [
    { type: ElementRef },
    { type: Renderer2 }
];
BreadcrumbComponent.propDecorators = {
    bold: [{ type: Input }],
    light: [{ type: Input }],
    circle: [{ type: Input }],
    uppercase: [{ type: Input }],
    class: [{ type: Input }],
    style: [{ type: Input }],
    ol: [{ type: ViewChild, args: ['ol', { static: false },] }]
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYnJlYWRjcnVtYi5jb21wb25lbnQuanMiLCJzb3VyY2VSb290IjoiL1VzZXJzL2FwcGxlL0RvY3VtZW50cy9wcm9qZWN0cy9wcm9qZWN0X2RldndhcmVzL0NvbnRyYXN0LUJvb3RzdHJhcC1Bbmd1bGFyL3Byb2plY3RzL25nLWNkYmFuZ3VsYXIvc3JjLyIsInNvdXJjZXMiOlsibGliL2NvbXBvbmVudHMvYnJlYWRjcnVtYi9icmVhZGNydW1iLmNvbXBvbmVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBRUwsU0FBUyxFQUNULFVBQVUsRUFDVixLQUFLLEVBRUwsU0FBUyxFQUNULFNBQVMsRUFDVCxpQkFBaUIsR0FDbEIsTUFBTSxlQUFlLENBQUM7QUFRdkIsTUFBTSxPQUFPLG1CQUFtQjtJQVM5QixZQUFvQixLQUFpQixFQUFVLFFBQW1CO1FBQTlDLFVBQUssR0FBTCxLQUFLLENBQVk7UUFBVSxhQUFRLEdBQVIsUUFBUSxDQUFXO0lBQUcsQ0FBQztJQUV0RSxRQUFRO1FBQ04sSUFBSSxDQUFDLFFBQVEsQ0FBQyxlQUFlLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxhQUFhLEVBQUUsT0FBTyxDQUFDLENBQUM7UUFDakUsSUFBSSxDQUFDLFFBQVEsQ0FBQyxlQUFlLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxhQUFhLEVBQUUsT0FBTyxDQUFDLENBQUM7SUFDbkUsQ0FBQztJQUVELGVBQWU7UUFDYixJQUFJLElBQUksQ0FBQyxJQUFJLEtBQUssSUFBSSxFQUFFO1lBQ3RCLElBQUksQ0FBQyxRQUFRLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsYUFBYSxFQUFFLG9CQUFvQixDQUFDLENBQUM7U0FDckU7UUFFRCxJQUFJLElBQUksQ0FBQyxLQUFLLEtBQUssSUFBSSxFQUFFO1lBQ3ZCLElBQUksQ0FBQyxRQUFRLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsYUFBYSxFQUFFLHFCQUFxQixDQUFDLENBQUM7U0FDdEU7UUFFRCxJQUFJLElBQUksQ0FBQyxTQUFTLEtBQUssSUFBSSxFQUFFO1lBQzNCLElBQUksQ0FBQyxRQUFRLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsYUFBYSxFQUFFLHlCQUF5QixDQUFDLENBQUM7U0FDMUU7UUFFRCxJQUFJLElBQUksQ0FBQyxNQUFNLEtBQUssSUFBSSxFQUFFO1lBQ3hCLElBQUksQ0FBQyxRQUFRLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsYUFBYSxFQUFFLHNCQUFzQixDQUFDLENBQUM7U0FDdkU7SUFDSCxDQUFDOzs7WUF0Q0YsU0FBUyxTQUFDO2dCQUNULFFBQVEsRUFBRSxlQUFlO2dCQUN6Qiw4SkFBMEM7Z0JBRTFDLGFBQWEsRUFBRSxpQkFBaUIsQ0FBQyxJQUFJOzthQUN0Qzs7O1lBYkMsVUFBVTtZQUdWLFNBQVM7OzttQkFZUixLQUFLO29CQUNMLEtBQUs7cUJBQ0wsS0FBSzt3QkFDTCxLQUFLO29CQUNMLEtBQUs7b0JBQ0wsS0FBSztpQkFDTCxTQUFTLFNBQUMsSUFBSSxFQUFFLEVBQUUsTUFBTSxFQUFFLEtBQUssRUFBRSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7XG4gIEFmdGVyVmlld0luaXQsXG4gIENvbXBvbmVudCxcbiAgRWxlbWVudFJlZixcbiAgSW5wdXQsXG4gIE9uSW5pdCxcbiAgUmVuZGVyZXIyLFxuICBWaWV3Q2hpbGQsXG4gIFZpZXdFbmNhcHN1bGF0aW9uLFxufSBmcm9tICdAYW5ndWxhci9jb3JlJztcblxuQENvbXBvbmVudCh7XG4gIHNlbGVjdG9yOiAnQ0RCQnJlYWRjcnVtYicsXG4gIHRlbXBsYXRlVXJsOiAnLi9icmVhZGNydW1iLmNvbXBvbmVudC5odG1sJyxcbiAgc3R5bGVVcmxzOiBbJy4vYnJlYWRjcnVtYi5jb21wb25lbnQuc2NzcyddLFxuICBlbmNhcHN1bGF0aW9uOiBWaWV3RW5jYXBzdWxhdGlvbi5Ob25lLFxufSlcbmV4cG9ydCBjbGFzcyBCcmVhZGNydW1iQ29tcG9uZW50IGltcGxlbWVudHMgT25Jbml0LCBBZnRlclZpZXdJbml0IHtcbiAgQElucHV0KCkgYm9sZDogYm9vbGVhbjtcbiAgQElucHV0KCkgbGlnaHQ6IGJvb2xlYW47XG4gIEBJbnB1dCgpIGNpcmNsZTogYm9vbGVhbjtcbiAgQElucHV0KCkgdXBwZXJjYXNlOiBib29sZWFuO1xuICBASW5wdXQoKSBjbGFzczogc3RyaW5nO1xuICBASW5wdXQoKSBzdHlsZTogc3RyaW5nO1xuICBAVmlld0NoaWxkKCdvbCcsIHsgc3RhdGljOiBmYWxzZSB9KSBvbDogRWxlbWVudFJlZjtcblxuICBjb25zdHJ1Y3Rvcihwcml2YXRlIGVsUmVmOiBFbGVtZW50UmVmLCBwcml2YXRlIHJlbmRlcmVyOiBSZW5kZXJlcjIpIHt9XG5cbiAgbmdPbkluaXQoKSB7XG4gICAgdGhpcy5yZW5kZXJlci5yZW1vdmVBdHRyaWJ1dGUodGhpcy5lbFJlZi5uYXRpdmVFbGVtZW50LCAnY2xhc3MnKTtcbiAgICB0aGlzLnJlbmRlcmVyLnJlbW92ZUF0dHJpYnV0ZSh0aGlzLmVsUmVmLm5hdGl2ZUVsZW1lbnQsICdzdHlsZScpO1xuICB9XG5cbiAgbmdBZnRlclZpZXdJbml0KCkge1xuICAgIGlmICh0aGlzLmJvbGQgPT09IHRydWUpIHtcbiAgICAgIHRoaXMucmVuZGVyZXIuYWRkQ2xhc3ModGhpcy5vbC5uYXRpdmVFbGVtZW50LCAnQ0RCQnJlYWRjcnVtYi1ib2xkJyk7XG4gICAgfVxuXG4gICAgaWYgKHRoaXMubGlnaHQgPT09IHRydWUpIHtcbiAgICAgIHRoaXMucmVuZGVyZXIuYWRkQ2xhc3ModGhpcy5vbC5uYXRpdmVFbGVtZW50LCAnQ0RCQnJlYWRjcnVtYi1saWdodCcpO1xuICAgIH1cblxuICAgIGlmICh0aGlzLnVwcGVyY2FzZSA9PT0gdHJ1ZSkge1xuICAgICAgdGhpcy5yZW5kZXJlci5hZGRDbGFzcyh0aGlzLm9sLm5hdGl2ZUVsZW1lbnQsICdDREJCcmVhZGNydW1iLXVwcGVyY2FzZScpO1xuICAgIH1cblxuICAgIGlmICh0aGlzLmNpcmNsZSA9PT0gdHJ1ZSkge1xuICAgICAgdGhpcy5yZW5kZXJlci5hZGRDbGFzcyh0aGlzLm9sLm5hdGl2ZUVsZW1lbnQsICdDREJCcmVhZGNydW1iLWNpcmNsZScpO1xuICAgIH1cbiAgfVxufVxuIl19