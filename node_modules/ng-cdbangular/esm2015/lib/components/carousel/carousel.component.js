import { Component, ContentChild, ContentChildren, Input, ViewChild, ElementRef, ViewEncapsulation, Renderer2, } from '@angular/core';
import { CarouselItemComponent } from '../carousel/carousel-item/carousel-item.component';
import { CarouselInnerComponent } from '../carousel/carousel-inner/carousel-inner.component';
export class CarouselComponent {
    constructor(renderer, elRef) {
        this.renderer = renderer;
        this.elRef = elRef;
        this.activeItem = 1;
        this.interval = 6000;
        this.length = 0;
        this.mobileGesture = true;
        this.onHoverStop = true;
        this.showControls = true;
        this.showIndicators = true;
        //State variables
        this.state = {
            activeItem: this.activeItem,
            initialLength: this.length,
            srcArray: [],
            swipeAvailable: true,
            initialX: null,
            initialY: null,
        };
        this.CarouselIndicatorsArray = [];
        this.clearCycleIntervalHandler = () => clearInterval(this.cycleInterval);
        this.swipeAvailableHandler = () => (this.state.swipeAvailable = true);
        this.restartInterval = () => {
            if (!!this.interval !== false) {
                this.clearCycleIntervalHandler();
                this.cycleInterval = setInterval(this.next, this.interval);
            }
        };
        this.next = () => {
            const { activeItem, initialLength } = this.state;
            const nextIndex = activeItem + 1;
            const nextItem = nextIndex > initialLength ? 1 : nextIndex;
            this.goToIndex(nextItem);
        };
        this.prev = () => {
            const { activeItem, initialLength } = this.state;
            const prevIndex = activeItem - 1;
            const prevItem = prevIndex < 1 ? initialLength : prevIndex;
            this.goToIndex(prevItem);
        };
        this.goToIndex = (item) => {
            (this.state.activeItem = item),
                this.inner.carouselItems.toArray().forEach((component) => {
                    component.slide = true;
                    component.activeItem = this.state.activeItem;
                });
            this.restartInterval();
        };
        this.startTouch = (e) => {
            if (this.mobileGesture !== false) {
                this.state.initialX = e.touches[0].clientX;
                this.state.initialY = e.touches[0].clientY;
            }
        };
        this.moveTouch = (e) => {
            this.state.swipeAvailable = false;
            const { initialX, initialY } = this.state;
            if (initialX === null || initialY === null) {
                return;
            }
            const currentX = e.touches[0].clientX;
            const currentY = e.touches[0].clientY;
            const diffX = initialX - currentX;
            const diffY = initialY - currentY;
            if (Math.abs(diffX) > Math.abs(diffY)) {
                // sliding horizontally
                if (diffX > 0) {
                    this.next();
                }
                else {
                    this.prev();
                }
            }
            this.state.initialX = null;
            this.state.initialY = null;
        };
    }
    ngOnInit() {
        this.renderer.removeAttribute(this.elRef.nativeElement, 'class');
        this.renderer.removeAttribute(this.elRef.nativeElement, 'style');
        let interval = this.interval;
        let oninit = () => {
            if (!!interval === false) {
                return;
            }
            this.cycleInterval = setInterval(this.next, this.interval);
            if (this.thumbnails) {
                const CarouselItemsArray = this.carouselRef.nativeElement.querySelectorAll('.carousel-item img');
                const srcArray = Array.prototype.map.call(CarouselItemsArray, (item) => item.src);
                this.state.srcArray = srcArray;
            }
            this.state.initialLength = this.length;
        };
        oninit();
        for (let i = 1; i <= this.state.initialLength; i++) {
            this.CarouselIndicatorsArray.push(i);
        }
    }
    ngAfterViewInit() {
        this.inner.carouselItems.toArray().forEach((component) => {
            setTimeout(() => {
                component.slide = true;
                component.activeItem = this.activeItem;
            }, 0);
        });
    }
    ngOnDestroy() {
        if (this.cycleInterval) {
            this.clearCycleIntervalHandler();
        }
    }
}
CarouselComponent.decorators = [
    { type: Component, args: [{
                selector: 'CDBCarousel',
                template: "<div class=\"carousel {{class}}\" [style]=\"style\" [class.carousel-thumbnails]=\"thumbnails\"\n    [class.testimonial-carousel]=\"testimonial\" [class.carousel-multi-item]=\"multiItem\"\n    [class.carousel-fade]=\"!multiItem\" aria-label='carousel' carouselRef (touchstart)=\"startTouch($event)\"\n    (touchmove)=\"state.swipeAvailable && moveTouch($event)\" (touchend)=\"onHoverStop && swipeAvailableHandler()\"\n    (mouseenter)=\"onHoverStop && clearCycleIntervalHandler()\" (mouseleave)=\"onHoverStop && restartInterval()\">\n    <div *ngIf=\"showControls && multiItem\" class=\"controls-top\">\n        <CDBCarousel-control [testimonial]='isTestimonial' [multiItem]='isMultiItem' class=\"btn-floating\"\n            direction=\"prev\" role=\"button\" (onClick)='prev()'>\n\n        </CDBCarousel-control>\n        <CDBCarousel-control [testimonial]='isTestimonial' [multiItem]='isMultiItem' class=\"btn-floating\"\n            direction=\"next\" role=\"button\" (onClick)='next()'>\n\n        </CDBCarousel-control>\n    </div>\n    <ng-content></ng-content>\n    <div *ngIf=\"showControls && !multiItem\">\n        <CDBCarousel-control [testimonial]='isTestimonial' [multiItem]='isMultiItem' direction=\"prev\" role=\"button\"\n            (onClick)='prev()'></CDBCarousel-control>\n        <CDBCarousel-control [testimonial]='isTestimonial' [multiItem]='isMultiItem' direction=\"next\" role=\"button\"\n            (onClick)='next()'></CDBCarousel-control>\n    </div>\n    <ol data-test=\"carousel-indicators\" class=\"carousel-indicators\" *ngIf=\"showIndicators\">\n        <CDBCarouselindicator *ngFor=\"let indicator of CarouselIndicatorsArray; let i = index\"\n            [img]=\"thumbnails ? state.srcArray[i] : null\" key='i' [active]=\"state.activeItem === i+1\"\n            (click)=\"goToIndex(i+1)\"></CDBCarouselindicator>\n    </ol>\n</div>",
                encapsulation: ViewEncapsulation.None,
                styles: [".carousel-inner{height:100%;overflow:hidden;position:relative;width:100%}.carousel-fade .carousel-item{display:block!important;height:100%;left:0;opacity:0;position:absolute;top:0;transition:transform 0ms ease-in-out,opacity .8s ease-out;width:100%;z-index:0}.carousel-fade .carousel-item.active{opacity:1;position:relative;z-index:1}.carousel-multi-item .carousel-item{display:inline-block!important}.carousel .carousel-slide-item{transition:left .5s}.carousel-control-next,.carousel-control-prev,.carousel-item-next,.carousel-item-prev{z-index:2}"]
            },] }
];
CarouselComponent.ctorParameters = () => [
    { type: Renderer2 },
    { type: ElementRef }
];
CarouselComponent.propDecorators = {
    activeItem: [{ type: Input }],
    class: [{ type: Input }],
    style: [{ type: Input }],
    interval: [{ type: Input }],
    length: [{ type: Input }],
    mobileGesture: [{ type: Input }],
    multiItem: [{ type: Input }],
    onHoverStop: [{ type: Input }],
    showControls: [{ type: Input }],
    showIndicators: [{ type: Input }],
    slide: [{ type: Input }],
    testimonial: [{ type: Input }],
    thumbnails: [{ type: Input }],
    items: [{ type: ContentChildren, args: [CarouselItemComponent,] }],
    inner: [{ type: ContentChild, args: [CarouselInnerComponent,] }],
    carouselRef: [{ type: ViewChild, args: ['carouselRef', { static: false },] }]
};
//# sourceMappingURL=data:application/json;base64,