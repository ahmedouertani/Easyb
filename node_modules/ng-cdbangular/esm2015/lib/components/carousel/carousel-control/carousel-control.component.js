import { Component, Output, EventEmitter, Input, ViewChild, ElementRef, Renderer2, ViewEncapsulation, } from '@angular/core';
export class CarouselControlComponent {
    constructor(elRef, renderer) {
        this.elRef = elRef;
        this.renderer = renderer;
        this.onClick = new EventEmitter();
    }
    ngOnInit() {
        if (this.direction === 'prev') {
            this.text = 'Previous';
        }
        else if (this.direction === 'next') {
            this.text = 'Next';
        }
    }
    ngAfterViewInit() {
        if (this.testimonial) {
            const arrow = this.direction === 'prev' ? 'left' : 'right';
            this.renderer.addClass(this.carouselcontrol.nativeElement, `carousel-control-${this.direction}`);
            this.renderer.addClass(this.carouselcontrol.nativeElement, arrow);
            this.renderer.addClass(this.carouselcontrol.nativeElement, `carousel-control`);
            this.renderer.addClass(this.caret.nativeElement, `icon-${this.direction}`);
        }
        else {
            this.renderer.addClass(this.carouselcontrol.nativeElement, `carousel-control-${this.direction}`);
            this.renderer.addClass(this.caret.nativeElement, `carousel-control-${this.direction}-icon`);
        }
        if (this.multiItem) {
            this.renderer.addClass(this.carouselcontrol.nativeElement, `btn-floating`);
        }
    }
}
CarouselControlComponent.decorators = [
    { type: Component, args: [{
                selector: 'CDBCarousel-control',
                template: "<a #carouselcontrol (click)=\"onClick.emit()\">\n    <div>\n        <span #caret [class]='caretClasses' aria-hidden=\"true\"></span>\n        <span class=\"sr-only\">{{text}}</span>\n    </div>\n</a>",
                encapsulation: ViewEncapsulation.None,
                styles: [""]
            },] }
];
CarouselControlComponent.ctorParameters = () => [
    { type: ElementRef },
    { type: Renderer2 }
];
CarouselControlComponent.propDecorators = {
    class: [{ type: Input }],
    direction: [{ type: Input }],
    multiItem: [{ type: Input }],
    testimonial: [{ type: Input }],
    caretClasses: [{ type: Input }],
    carouselcontrol: [{ type: ViewChild, args: ['carouselcontrol', { static: false },] }],
    caret: [{ type: ViewChild, args: ['caret', { static: false },] }],
    onClick: [{ type: Output }]
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2Fyb3VzZWwtY29udHJvbC5jb21wb25lbnQuanMiLCJzb3VyY2VSb290IjoiL1VzZXJzL2FwcGxlL0RvY3VtZW50cy9wcm9qZWN0cy9wcm9qZWN0X2RldndhcmVzL0NvbnRyYXN0LUJvb3RzdHJhcC1Bbmd1bGFyL3Byb2plY3RzL25nLWNkYmFuZ3VsYXIvc3JjLyIsInNvdXJjZXMiOlsibGliL2NvbXBvbmVudHMvY2Fyb3VzZWwvY2Fyb3VzZWwtY29udHJvbC9jYXJvdXNlbC1jb250cm9sLmNvbXBvbmVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQ0wsU0FBUyxFQUNULE1BQU0sRUFDTixZQUFZLEVBRVosS0FBSyxFQUVMLFNBQVMsRUFDVCxVQUFVLEVBQ1YsU0FBUyxFQUNULGlCQUFpQixHQUNsQixNQUFNLGVBQWUsQ0FBQztBQVF2QixNQUFNLE9BQU8sd0JBQXdCO0lBWW5DLFlBQW9CLEtBQWlCLEVBQVUsUUFBbUI7UUFBOUMsVUFBSyxHQUFMLEtBQUssQ0FBWTtRQUFVLGFBQVEsR0FBUixRQUFRLENBQVc7UUFGeEQsWUFBTyxHQUFHLElBQUksWUFBWSxFQUFFLENBQUM7SUFFOEIsQ0FBQztJQUV0RSxRQUFRO1FBQ04sSUFBSSxJQUFJLENBQUMsU0FBUyxLQUFLLE1BQU0sRUFBRTtZQUM3QixJQUFJLENBQUMsSUFBSSxHQUFHLFVBQVUsQ0FBQztTQUN4QjthQUFNLElBQUksSUFBSSxDQUFDLFNBQVMsS0FBSyxNQUFNLEVBQUU7WUFDcEMsSUFBSSxDQUFDLElBQUksR0FBRyxNQUFNLENBQUM7U0FDcEI7SUFDSCxDQUFDO0lBQ0QsZUFBZTtRQUNiLElBQUksSUFBSSxDQUFDLFdBQVcsRUFBRTtZQUNwQixNQUFNLEtBQUssR0FBRyxJQUFJLENBQUMsU0FBUyxLQUFLLE1BQU0sQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUM7WUFDM0QsSUFBSSxDQUFDLFFBQVEsQ0FBQyxRQUFRLENBQ3BCLElBQUksQ0FBQyxlQUFlLENBQUMsYUFBYSxFQUNsQyxvQkFBb0IsSUFBSSxDQUFDLFNBQVMsRUFBRSxDQUNyQyxDQUFDO1lBQ0YsSUFBSSxDQUFDLFFBQVEsQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLGVBQWUsQ0FBQyxhQUFhLEVBQUUsS0FBSyxDQUFDLENBQUM7WUFDbEUsSUFBSSxDQUFDLFFBQVEsQ0FBQyxRQUFRLENBQ3BCLElBQUksQ0FBQyxlQUFlLENBQUMsYUFBYSxFQUNsQyxrQkFBa0IsQ0FDbkIsQ0FBQztZQUNGLElBQUksQ0FBQyxRQUFRLENBQUMsUUFBUSxDQUNwQixJQUFJLENBQUMsS0FBSyxDQUFDLGFBQWEsRUFDeEIsUUFBUSxJQUFJLENBQUMsU0FBUyxFQUFFLENBQ3pCLENBQUM7U0FDSDthQUFNO1lBQ0wsSUFBSSxDQUFDLFFBQVEsQ0FBQyxRQUFRLENBQ3BCLElBQUksQ0FBQyxlQUFlLENBQUMsYUFBYSxFQUNsQyxvQkFBb0IsSUFBSSxDQUFDLFNBQVMsRUFBRSxDQUNyQyxDQUFDO1lBQ0YsSUFBSSxDQUFDLFFBQVEsQ0FBQyxRQUFRLENBQ3BCLElBQUksQ0FBQyxLQUFLLENBQUMsYUFBYSxFQUN4QixvQkFBb0IsSUFBSSxDQUFDLFNBQVMsT0FBTyxDQUMxQyxDQUFDO1NBQ0g7UUFDRCxJQUFJLElBQUksQ0FBQyxTQUFTLEVBQUU7WUFDbEIsSUFBSSxDQUFDLFFBQVEsQ0FBQyxRQUFRLENBQ3BCLElBQUksQ0FBQyxlQUFlLENBQUMsYUFBYSxFQUNsQyxjQUFjLENBQ2YsQ0FBQztTQUNIO0lBQ0gsQ0FBQzs7O1lBM0RGLFNBQVMsU0FBQztnQkFDVCxRQUFRLEVBQUUscUJBQXFCO2dCQUMvQixtTkFBZ0Q7Z0JBRWhELGFBQWEsRUFBRSxpQkFBaUIsQ0FBQyxJQUFJOzthQUN0Qzs7O1lBVkMsVUFBVTtZQUNWLFNBQVM7OztvQkFXUixLQUFLO3dCQUNMLEtBQUs7d0JBQ0wsS0FBSzswQkFDTCxLQUFLOzJCQUNMLEtBQUs7OEJBRUwsU0FBUyxTQUFDLGlCQUFpQixFQUFFLEVBQUUsTUFBTSxFQUFFLEtBQUssRUFBRTtvQkFDOUMsU0FBUyxTQUFDLE9BQU8sRUFBRSxFQUFFLE1BQU0sRUFBRSxLQUFLLEVBQUU7c0JBRXBDLE1BQU0iLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge1xuICBDb21wb25lbnQsXG4gIE91dHB1dCxcbiAgRXZlbnRFbWl0dGVyLFxuICBPbkluaXQsXG4gIElucHV0LFxuICBBZnRlclZpZXdJbml0LFxuICBWaWV3Q2hpbGQsXG4gIEVsZW1lbnRSZWYsXG4gIFJlbmRlcmVyMixcbiAgVmlld0VuY2Fwc3VsYXRpb24sXG59IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuXG5AQ29tcG9uZW50KHtcbiAgc2VsZWN0b3I6ICdDREJDYXJvdXNlbC1jb250cm9sJyxcbiAgdGVtcGxhdGVVcmw6ICcuL2Nhcm91c2VsLWNvbnRyb2wuY29tcG9uZW50Lmh0bWwnLFxuICBzdHlsZVVybHM6IFsnLi9jYXJvdXNlbC1jb250cm9sLmNvbXBvbmVudC5zY3NzJ10sXG4gIGVuY2Fwc3VsYXRpb246IFZpZXdFbmNhcHN1bGF0aW9uLk5vbmUsXG59KVxuZXhwb3J0IGNsYXNzIENhcm91c2VsQ29udHJvbENvbXBvbmVudCBpbXBsZW1lbnRzIE9uSW5pdCwgQWZ0ZXJWaWV3SW5pdCB7XG4gIEBJbnB1dCgpIGNsYXNzOiBzdHJpbmc7XG4gIEBJbnB1dCgpIGRpcmVjdGlvbjogc3RyaW5nO1xuICBASW5wdXQoKSBtdWx0aUl0ZW06IGJvb2xlYW47XG4gIEBJbnB1dCgpIHRlc3RpbW9uaWFsOiBib29sZWFuO1xuICBASW5wdXQoKSBjYXJldENsYXNzZXM6IHN0cmluZztcblxuICBAVmlld0NoaWxkKCdjYXJvdXNlbGNvbnRyb2wnLCB7IHN0YXRpYzogZmFsc2UgfSkgY2Fyb3VzZWxjb250cm9sOiBFbGVtZW50UmVmO1xuICBAVmlld0NoaWxkKCdjYXJldCcsIHsgc3RhdGljOiBmYWxzZSB9KSBjYXJldDogRWxlbWVudFJlZjtcblxuICBAT3V0cHV0KCkgb25DbGljayA9IG5ldyBFdmVudEVtaXR0ZXIoKTtcbiAgdGV4dDtcbiAgY29uc3RydWN0b3IocHJpdmF0ZSBlbFJlZjogRWxlbWVudFJlZiwgcHJpdmF0ZSByZW5kZXJlcjogUmVuZGVyZXIyKSB7fVxuXG4gIG5nT25Jbml0KCk6IHZvaWQge1xuICAgIGlmICh0aGlzLmRpcmVjdGlvbiA9PT0gJ3ByZXYnKSB7XG4gICAgICB0aGlzLnRleHQgPSAnUHJldmlvdXMnO1xuICAgIH0gZWxzZSBpZiAodGhpcy5kaXJlY3Rpb24gPT09ICduZXh0Jykge1xuICAgICAgdGhpcy50ZXh0ID0gJ05leHQnO1xuICAgIH1cbiAgfVxuICBuZ0FmdGVyVmlld0luaXQoKSB7XG4gICAgaWYgKHRoaXMudGVzdGltb25pYWwpIHtcbiAgICAgIGNvbnN0IGFycm93ID0gdGhpcy5kaXJlY3Rpb24gPT09ICdwcmV2JyA/ICdsZWZ0JyA6ICdyaWdodCc7XG4gICAgICB0aGlzLnJlbmRlcmVyLmFkZENsYXNzKFxuICAgICAgICB0aGlzLmNhcm91c2VsY29udHJvbC5uYXRpdmVFbGVtZW50LFxuICAgICAgICBgY2Fyb3VzZWwtY29udHJvbC0ke3RoaXMuZGlyZWN0aW9ufWBcbiAgICAgICk7XG4gICAgICB0aGlzLnJlbmRlcmVyLmFkZENsYXNzKHRoaXMuY2Fyb3VzZWxjb250cm9sLm5hdGl2ZUVsZW1lbnQsIGFycm93KTtcbiAgICAgIHRoaXMucmVuZGVyZXIuYWRkQ2xhc3MoXG4gICAgICAgIHRoaXMuY2Fyb3VzZWxjb250cm9sLm5hdGl2ZUVsZW1lbnQsXG4gICAgICAgIGBjYXJvdXNlbC1jb250cm9sYFxuICAgICAgKTtcbiAgICAgIHRoaXMucmVuZGVyZXIuYWRkQ2xhc3MoXG4gICAgICAgIHRoaXMuY2FyZXQubmF0aXZlRWxlbWVudCxcbiAgICAgICAgYGljb24tJHt0aGlzLmRpcmVjdGlvbn1gXG4gICAgICApO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLnJlbmRlcmVyLmFkZENsYXNzKFxuICAgICAgICB0aGlzLmNhcm91c2VsY29udHJvbC5uYXRpdmVFbGVtZW50LFxuICAgICAgICBgY2Fyb3VzZWwtY29udHJvbC0ke3RoaXMuZGlyZWN0aW9ufWBcbiAgICAgICk7XG4gICAgICB0aGlzLnJlbmRlcmVyLmFkZENsYXNzKFxuICAgICAgICB0aGlzLmNhcmV0Lm5hdGl2ZUVsZW1lbnQsXG4gICAgICAgIGBjYXJvdXNlbC1jb250cm9sLSR7dGhpcy5kaXJlY3Rpb259LWljb25gXG4gICAgICApO1xuICAgIH1cbiAgICBpZiAodGhpcy5tdWx0aUl0ZW0pIHtcbiAgICAgIHRoaXMucmVuZGVyZXIuYWRkQ2xhc3MoXG4gICAgICAgIHRoaXMuY2Fyb3VzZWxjb250cm9sLm5hdGl2ZUVsZW1lbnQsXG4gICAgICAgIGBidG4tZmxvYXRpbmdgXG4gICAgICApO1xuICAgIH1cbiAgfVxufVxuIl19