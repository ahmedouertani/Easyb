import { Component, ElementRef, Input, Renderer2, ViewChild, ViewEncapsulation, } from '@angular/core';
export class NavBrandComponent {
    constructor(elRef, renderer) {
        this.elRef = elRef;
        this.renderer = renderer;
    }
    ngOnInit() {
        this.renderer.removeAttribute(this.elRef.nativeElement, 'class');
        this.renderer.removeAttribute(this.elRef.nativeElement, 'style');
    }
    ngAfterViewInit() {
        if (this.href) {
            // this.navBrand1.class = 'navbar-brand';
            this.renderer.addClass(this.navBrand1.link.nativeElement, 'navbar-brand');
        }
        else {
            this.renderer.addClass(this.navBrand2.nativeElement, 'navbar-brand');
        }
    }
}
NavBrandComponent.decorators = [
    { type: Component, args: [{
                selector: 'CDBNavBrand',
                template: "<ng-container [ngSwitch]=\"href !== undefined\">\n    <ng-container *ngSwitchCase=\"true\">\n        <CDBLink #navBrand1 [to]=\"href\" [class]=\"class\" [style]=\"style\">\n            <ng-container *ngTemplateOutlet=\"content\"></ng-container>\n        </CDBLink>\n    </ng-container>\n\n    <ng-container *ngSwitchCase=\"false\">\n        <div #navBrand2 [class]=\"class\" [style]=\"style\">\n            <ng-container *ngTemplateOutlet=\"content\"></ng-container>\n        </div>\n    </ng-container>\n</ng-container>\n\n<ng-template #content>\n    <ng-content></ng-content>\n</ng-template>",
                encapsulation: ViewEncapsulation.None,
                styles: [""]
            },] }
];
NavBrandComponent.ctorParameters = () => [
    { type: ElementRef },
    { type: Renderer2 }
];
NavBrandComponent.propDecorators = {
    class: [{ type: Input }],
    style: [{ type: Input }],
    href: [{ type: Input }],
    navBrand1: [{ type: ViewChild, args: ['navBrand1', { static: false },] }],
    navBrand2: [{ type: ViewChild, args: ['navBrand2', { static: false },] }]
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibmF2LWJyYW5kLmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiIvVXNlcnMvYXBwbGUvRG9jdW1lbnRzL3Byb2plY3RzL3Byb2plY3RfZGV2d2FyZXMvQ29udHJhc3QtQm9vdHN0cmFwLUFuZ3VsYXIvcHJvamVjdHMvbmctY2RiYW5ndWxhci9zcmMvIiwic291cmNlcyI6WyJsaWIvY29tcG9uZW50cy9uYXZiYXIvbmF2LWJyYW5kL25hdi1icmFuZC5jb21wb25lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUVMLFNBQVMsRUFDVCxVQUFVLEVBQ1YsS0FBSyxFQUVMLFNBQVMsRUFDVCxTQUFTLEVBQ1QsaUJBQWlCLEdBQ2xCLE1BQU0sZUFBZSxDQUFDO0FBU3ZCLE1BQU0sT0FBTyxpQkFBaUI7SUFPNUIsWUFBb0IsS0FBaUIsRUFBVSxRQUFtQjtRQUE5QyxVQUFLLEdBQUwsS0FBSyxDQUFZO1FBQVUsYUFBUSxHQUFSLFFBQVEsQ0FBVztJQUFHLENBQUM7SUFFdEUsUUFBUTtRQUNOLElBQUksQ0FBQyxRQUFRLENBQUMsZUFBZSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsYUFBYSxFQUFFLE9BQU8sQ0FBQyxDQUFDO1FBQ2pFLElBQUksQ0FBQyxRQUFRLENBQUMsZUFBZSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsYUFBYSxFQUFFLE9BQU8sQ0FBQyxDQUFDO0lBQ25FLENBQUM7SUFFRCxlQUFlO1FBQ2IsSUFBSSxJQUFJLENBQUMsSUFBSSxFQUFFO1lBQ2IseUNBQXlDO1lBQ3pDLElBQUksQ0FBQyxRQUFRLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDLGFBQWEsRUFBRSxjQUFjLENBQUMsQ0FBQztTQUMzRTthQUFNO1lBQ0wsSUFBSSxDQUFDLFFBQVEsQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxhQUFhLEVBQUUsY0FBYyxDQUFDLENBQUM7U0FDdEU7SUFDSCxDQUFDOzs7WUEzQkYsU0FBUyxTQUFDO2dCQUNULFFBQVEsRUFBRSxhQUFhO2dCQUN2Qiw2bEJBQXlDO2dCQUV6QyxhQUFhLEVBQUUsaUJBQWlCLENBQUMsSUFBSTs7YUFDdEM7OztZQWRDLFVBQVU7WUFHVixTQUFTOzs7b0JBYVIsS0FBSztvQkFDTCxLQUFLO21CQUNMLEtBQUs7d0JBQ0wsU0FBUyxTQUFDLFdBQVcsRUFBRSxFQUFFLE1BQU0sRUFBRSxLQUFLLEVBQUU7d0JBQ3hDLFNBQVMsU0FBQyxXQUFXLEVBQUUsRUFBRSxNQUFNLEVBQUUsS0FBSyxFQUFFIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtcbiAgQWZ0ZXJWaWV3SW5pdCxcbiAgQ29tcG9uZW50LFxuICBFbGVtZW50UmVmLFxuICBJbnB1dCxcbiAgT25Jbml0LFxuICBSZW5kZXJlcjIsXG4gIFZpZXdDaGlsZCxcbiAgVmlld0VuY2Fwc3VsYXRpb24sXG59IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgTGlua0NvbXBvbmVudCB9IGZyb20gJy4uLy4uL2xpbmsvbGluay5jb21wb25lbnQnO1xuXG5AQ29tcG9uZW50KHtcbiAgc2VsZWN0b3I6ICdDREJOYXZCcmFuZCcsXG4gIHRlbXBsYXRlVXJsOiAnLi9uYXYtYnJhbmQuY29tcG9uZW50Lmh0bWwnLFxuICBzdHlsZVVybHM6IFsnLi9uYXYtYnJhbmQuY29tcG9uZW50LnNjc3MnXSxcbiAgZW5jYXBzdWxhdGlvbjogVmlld0VuY2Fwc3VsYXRpb24uTm9uZSxcbn0pXG5leHBvcnQgY2xhc3MgTmF2QnJhbmRDb21wb25lbnQgaW1wbGVtZW50cyBPbkluaXQsIEFmdGVyVmlld0luaXQge1xuICBASW5wdXQoKSBjbGFzczogc3RyaW5nO1xuICBASW5wdXQoKSBzdHlsZTogc3RyaW5nO1xuICBASW5wdXQoKSBocmVmOiBzdHJpbmc7XG4gIEBWaWV3Q2hpbGQoJ25hdkJyYW5kMScsIHsgc3RhdGljOiBmYWxzZSB9KSBuYXZCcmFuZDE6IExpbmtDb21wb25lbnQ7XG4gIEBWaWV3Q2hpbGQoJ25hdkJyYW5kMicsIHsgc3RhdGljOiBmYWxzZSB9KSBuYXZCcmFuZDI6IEVsZW1lbnRSZWY7XG5cbiAgY29uc3RydWN0b3IocHJpdmF0ZSBlbFJlZjogRWxlbWVudFJlZiwgcHJpdmF0ZSByZW5kZXJlcjogUmVuZGVyZXIyKSB7fVxuXG4gIG5nT25Jbml0KCkge1xuICAgIHRoaXMucmVuZGVyZXIucmVtb3ZlQXR0cmlidXRlKHRoaXMuZWxSZWYubmF0aXZlRWxlbWVudCwgJ2NsYXNzJyk7XG4gICAgdGhpcy5yZW5kZXJlci5yZW1vdmVBdHRyaWJ1dGUodGhpcy5lbFJlZi5uYXRpdmVFbGVtZW50LCAnc3R5bGUnKTtcbiAgfVxuXG4gIG5nQWZ0ZXJWaWV3SW5pdCgpIHtcbiAgICBpZiAodGhpcy5ocmVmKSB7XG4gICAgICAvLyB0aGlzLm5hdkJyYW5kMS5jbGFzcyA9ICduYXZiYXItYnJhbmQnO1xuICAgICAgdGhpcy5yZW5kZXJlci5hZGRDbGFzcyh0aGlzLm5hdkJyYW5kMS5saW5rLm5hdGl2ZUVsZW1lbnQsICduYXZiYXItYnJhbmQnKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5yZW5kZXJlci5hZGRDbGFzcyh0aGlzLm5hdkJyYW5kMi5uYXRpdmVFbGVtZW50LCAnbmF2YmFyLWJyYW5kJyk7XG4gICAgfVxuICB9XG59XG4iXX0=