import { Component, ElementRef, Input, Renderer2, ViewChild, ViewEncapsulation, } from '@angular/core';
export class NavbarComponent {
    constructor(elRef, renderer) {
        this.elRef = elRef;
        this.renderer = renderer;
        this.isCollapsed = false;
        this.expand = false;
        this.scrolling = false;
    }
    ngOnInit() {
        this.renderer.removeAttribute(this.elRef.nativeElement, 'class');
        this.renderer.removeAttribute(this.elRef.nativeElement, 'style');
        if (this.scrolling === true || this.scrollingNavbarOffset) {
            window.addEventListener('scroll', this.handleScroll);
        }
        // if (this.scrolling === true || this.scrollingNavbarOffset) {
        //   window.removeEventListener('scroll', this.handleScroll);
        // }
    }
    ngAfterViewInit() {
        if (this.color) {
            this.renderer.addClass(this.nav.nativeElement, this.color);
        }
        if (this.light === true) {
            this.renderer.addClass(this.nav.nativeElement, 'navbar-light');
        }
        if (this.dark === true) {
            this.renderer.addClass(this.nav.nativeElement, 'navbar-dark');
        }
        if (this.sticky) {
            this.renderer.addClass(this.nav.nativeElement, `sticky-${this.sticky}`);
        }
        if (this.fixed) {
            this.renderer.addClass(this.nav.nativeElement, `fixed-${this.fixed}`);
        }
        if (this.scrolling === true || this.scrollingNavbarOffset) {
            this.renderer.addClass(this.nav.nativeElement, 'scrolling-navbar');
        }
        if (this.double === true) {
            this.renderer.addClass(this.nav.nativeElement, 'double-nav');
        }
        if (this.isCollapsed === true) {
            this.renderer.addClass(this.nav.nativeElement, 'top-nav-collapse');
        }
        if (this.expand === true || this.expand === 'xs') {
            this.renderer.addClass(this.nav.nativeElement, 'navbar-expand');
        }
        else if (this.expand === 'sm' ||
            this.expand === 'md' ||
            this.expand === 'lg' ||
            this.expand === 'xl') {
            this.renderer.addClass(this.nav.nativeElement, `navbar-expand-${this.expand}`);
        }
    }
    handleScroll() {
        const scrollingNavbarOffset = this.scrollingNavbarOffset || 50;
        if (window.pageYOffset > scrollingNavbarOffset) {
            this.isCollapsed = true;
        }
        else {
            this.isCollapsed = false;
        }
    }
}
NavbarComponent.decorators = [
    { type: Component, args: [{
                selector: 'CDBNavbar',
                template: "<nav #nav class=\"navbar {{ class }}\" [style]=\"style\" role='navigation'>\n    <ng-content></ng-content>\n</nav>",
                encapsulation: ViewEncapsulation.None,
                styles: [".primary{background-color:#276ef1;border-color:#276ef1;box-sizing:border-box;color:#fff}.primary:hover{background-color:rgba(39,110,241,.7411764705882353);color:#fff}.secondary{background-color:#7356bf;border-color:#7356bf;color:#fff}.secondary:hover{background-color:rgba(115,86,191,.7411764705882353);color:#fff}.success{background-color:#05944f;border-color:#05944f;color:#fff}.success:hover{background-color:rgba(5,148,79,.7411764705882353);color:#fff}.danger{background-color:#e11900;border-color:#e11900;color:#fff}.danger:hover{background-color:rgba(225,25,0,.7411764705882353);color:#fff}.warning{background-color:#ffe975;border-color:#ffe975;color:#66512c}.warning:hover{background-color:rgba(255,233,117,.7411764705882353);color:#66512c}.dark{background-color:#000;border-color:#000;color:#fff}.dark:hover{background-color:rgba(0,0,0,.7411764705882353);color:#fff}.light{background-color:#eee;border-color:#eee;color:#000}.light:hover{background-color:hsla(0,0%,93.3%,.7411764705882353);color:#000}.white{background-color:#fff;border-color:#fff;color:#000}.white:hover{background-color:hsla(0,0%,100%,.8352941176470589);color:#000}.info{background-color:#17a2b8;border-color:#17a2b8;color:#fff}.info:hover{background-color:rgba(23,162,184,.7411764705882353);color:#fff}"]
            },] }
];
NavbarComponent.ctorParameters = () => [
    { type: ElementRef },
    { type: Renderer2 }
];
NavbarComponent.propDecorators = {
    isCollapsed: [{ type: Input }],
    expand: [{ type: Input }],
    light: [{ type: Input }],
    dark: [{ type: Input }],
    sticky: [{ type: Input }],
    fixed: [{ type: Input }],
    scrolling: [{ type: Input }],
    color: [{ type: Input }],
    class: [{ type: Input }],
    style: [{ type: Input }],
    scrollingNavbarOffset: [{ type: Input }],
    double: [{ type: Input }],
    transparent: [{ type: Input }],
    nav: [{ type: ViewChild, args: ['nav', { static: false },] }]
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibmF2YmFyLmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiIvVXNlcnMvYXBwbGUvRG9jdW1lbnRzL3Byb2plY3RzL3Byb2plY3RfZGV2d2FyZXMvQ29udHJhc3QtQm9vdHN0cmFwLUFuZ3VsYXIvcHJvamVjdHMvbmctY2RiYW5ndWxhci9zcmMvIiwic291cmNlcyI6WyJsaWIvY29tcG9uZW50cy9uYXZiYXIvbmF2YmFyLmNvbXBvbmVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBRUwsU0FBUyxFQUNULFVBQVUsRUFDVixLQUFLLEVBRUwsU0FBUyxFQUNULFNBQVMsRUFDVCxpQkFBaUIsR0FDbEIsTUFBTSxlQUFlLENBQUM7QUFRdkIsTUFBTSxPQUFPLGVBQWU7SUFpQjFCLFlBQW9CLEtBQWlCLEVBQVUsUUFBbUI7UUFBOUMsVUFBSyxHQUFMLEtBQUssQ0FBWTtRQUFVLGFBQVEsR0FBUixRQUFRLENBQVc7UUFoQnpELGdCQUFXLEdBQVksS0FBSyxDQUFDO1FBQzdCLFdBQU0sR0FBcUIsS0FBSyxDQUFDO1FBS2pDLGNBQVMsR0FBWSxLQUFLLENBQUM7SUFVaUMsQ0FBQztJQUV0RSxRQUFRO1FBQ04sSUFBSSxDQUFDLFFBQVEsQ0FBQyxlQUFlLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxhQUFhLEVBQUUsT0FBTyxDQUFDLENBQUM7UUFDakUsSUFBSSxDQUFDLFFBQVEsQ0FBQyxlQUFlLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxhQUFhLEVBQUUsT0FBTyxDQUFDLENBQUM7UUFFakUsSUFBSSxJQUFJLENBQUMsU0FBUyxLQUFLLElBQUksSUFBSSxJQUFJLENBQUMscUJBQXFCLEVBQUU7WUFDekQsTUFBTSxDQUFDLGdCQUFnQixDQUFDLFFBQVEsRUFBRSxJQUFJLENBQUMsWUFBWSxDQUFDLENBQUM7U0FDdEQ7UUFFRCwrREFBK0Q7UUFDL0QsNkRBQTZEO1FBQzdELElBQUk7SUFDTixDQUFDO0lBRUQsZUFBZTtRQUNiLElBQUksSUFB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SztvQkFDTCxLQUFLO21CQUNMLEtBQUs7cUJBQ0wsS0FBSztvQkFDTCxLQUFLO3dCQUNMLEtBQUs7b0JBQ0wsS0FBSztvQkFDTCxLQUFLO29CQUNMLEtBQUs7b0NBQ0wsS0FBSztxQkFDTCxLQUFLOzBCQUNMLEtBQUs7a0JBRUwsU0FBUyxTQUFDLEtBQUssRUFBRSxFQUFFLE1BQU0sRUFBRSxLQUFLLEVBQUUiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge1xuICBBZnRlclZpZXdJbml0LFxuICBDb21wb25lbnQsXG4gIEVsZW1lbnRSZWYsXG4gIElucHV0LFxuICBPbkluaXQsXG4gIFJlbmRlcmVyMixcbiAgVmlld0NoaWxkLFxuICBWaWV3RW5jYXBzdWxhdGlvbixcbn0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5cbkBDb21wb25lbnQoe1xuICBzZWxlY3RvcjogJ0NEQk5hdmJhcicsXG4gIHRlbXBsYXRlVXJsOiAnLi9uYXZiYXIuY29tcG9uZW50Lmh0bWwnLFxuICBzdHlsZVVybHM6IFsnLi9uYXZiYXIuY29tcG9uZW50LnNjc3MnXSxcbiAgZW5jYXBzdWxhdGlvbjogVmlld0VuY2Fwc3VsYXRpb24uTm9uZSxcbn0pXG5leHBvcnQgY2xhc3MgTmF2YmFyQ29tcG9uZW50IGltcGxlbWVudHMgT25Jbml0LCBBZnRlclZpZXdJbml0IHtcbiAgQElucHV0KCkgaXNDb2xsYXBzZWQ6IGJvb2xlYW4gPSBmYWxzZTtcbiAgQElucHV0KCkgZXhwYW5kOiBib29sZWFuIHwgc3RyaW5nID0gZmFsc2U7XG4gIEBJbnB1dCgpIGxpZ2h0OiBib29sZWFuO1xuICBASW5wdXQoKSBkYXJrOiBib29sZWFuO1xuICBASW5wdXQoKSBzdGlja3k6IHN0cmluZztcbiAgQElucHV0KCkgZml4ZWQ6IHN0cmluZztcbiAgQElucHV0KCkgc2Nyb2xsaW5nOiBib29sZWFuID0gZmFsc2U7XG4gIEBJbnB1dCgpIGNvbG9yOiBzdHJpbmc7XG4gIEBJbnB1dCgpIGNsYXNzOiBzdHJpbmc7XG4gIEBJbnB1dCgpIHN0eWxlOiBzdHJpbmc7XG4gIEBJbnB1dCgpIHNjcm9sbGluZ05hdmJhck9mZnNldDogbnVtYmVyO1xuICBASW5wdXQoKSBkb3VibGU6IGJvb2xlYW47XG4gIEBJbnB1dCgpIHRyYW5zcGFyZW50OiBib29sZWFuO1xuXG4gIEBWaWV3Q2hpbGQoJ25hdicsIHsgc3RhdGljOiBmYWxzZSB9KSBuYXY6IEVsZW1lbnRSZWY7XG5cbiAgY29uc3RydWN0b3IocHJpdmF0ZSBlbFJlZjogRWxlbWVudFJlZiwgcHJpdmF0ZSByZW5kZXJlcjogUmVuZGVyZXIyKSB7fVxuXG4gIG5nT25Jbml0KCkge1xuICAgIHRoaXMucmVuZGVyZXIucmVtb3ZlQXR0cmlidXRlKHRoaXMuZWxSZWYubmF0aXZlRWxlbWVudCwgJ2NsYXNzJyk7XG4gICAgdGhpcy5yZW5kZXJlci5yZW1vdmVBdHRyaWJ1dGUodGhpcy5lbFJlZi5uYXRpdmVFbGVtZW50LCAnc3R5bGUnKTtcblxuICAgIGlmICh0aGlzLnNjcm9sbGluZyA9PT0gdHJ1ZSB8fCB0aGlzLnNjcm9sbGluZ05hdmJhck9mZnNldCkge1xuICAgICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ3Njcm9sbCcsIHRoaXMuaGFuZGxlU2Nyb2xsKTtcbiAgICB9XG5cbiAgICAvLyBpZiAodGhpcy5zY3JvbGxpbmcgPT09IHRydWUgfHwgdGhpcy5zY3JvbGxpbmdOYXZiYXJPZmZzZXQpIHtcbiAgICAvLyAgIHdpbmRvdy5yZW1vdmVFdmVudExpc3RlbmVyKCdzY3JvbGwnLCB0aGlzLmhhbmRsZVNjcm9sbCk7XG4gICAgLy8gfVxuICB9XG5cbiAgbmdBZnRlclZpZXdJbml0KCkge1xuICAgIGlmICh0aGlzLmNvbG9yKSB7XG4gICAgICB0aGlzLnJlbmRlcmVyLmFkZENsYXNzKHRoaXMubmF2Lm5hdGl2ZUVsZW1lbnQsIHRoaXMuY29sb3IpO1xuICAgIH1cblxuICAgIGlmICh0aGlzLmxpZ2h0ID09PSB0cnVlKSB7XG4gICAgICB0aGlzLnJlbmRlcmVyLmFkZENsYXNzKHRoaXMubmF2Lm5hdGl2ZUVsZW1lbnQsICduYXZiYXItbGlnaHQnKTtcbiAgICB9XG5cbiAgICBpZiAodGhpcy5kYXJrID09PSB0cnVlKSB7XG4gICAgICB0aGlzLnJlbmRlcmVyLmFkZENsYXNzKHRoaXMubmF2Lm5hdGl2ZUVsZW1lbnQsICduYXZiYXItZGFyaycpO1xuICAgIH1cblxuICAgIGlmICh0aGlzLnN0aWNreSkge1xuICAgICAgdGhpcy5yZW5kZXJlci5hZGRDbGFzcyh0aGlzLm5hdi5uYXRpdmVFbGVtZW50LCBgc3RpY2t5LSR7dGhpcy5zdGlja3l9YCk7XG4gICAgfVxuXG4gICAgaWYgKHRoaXMuZml4ZWQpIHtcbiAgICAgIHRoaXMucmVuZGVyZXIuYWRkQ2xhc3ModGhpcy5uYXYubmF0aXZlRWxlbWVudCwgYGZpeGVkLSR7dGhpcy5maXhlZH1gKTtcbiAgICB9XG5cbiAgICBpZiAodGhpcy5zY3JvbGxpbmcgPT09IHRydWUgfHwgdGhpcy5zY3JvbGxpbmdOYXZiYXJPZmZzZXQpIHtcbiAgICAgIHRoaXMucmVuZGVyZXIuYWRkQ2xhc3ModGhpcy5uYXYubmF0aXZlRWxlbWVudCwgJ3Njcm9sbGluZy1uYXZiYXInKTtcbiAgICB9XG5cbiAgICBpZiAodGhpcy5kb3VibGUgPT09IHRydWUpIHtcbiAgICAgIHRoaXMucmVuZGVyZXIuYWRkQ2xhc3ModGhpcy5uYXYubmF0aXZlRWxlbWVudCwgJ2RvdWJsZS1uYXYnKTtcbiAgICB9XG5cbiAgICBpZiAodGhpcy5pc0NvbGxhcHNlZCA9PT0gdHJ1ZSkge1xuICAgICAgdGhpcy5yZW5kZXJlci5hZGRDbGFzcyh0aGlzLm5hdi5uYXRpdmVFbGVtZW50LCAndG9wLW5hdi1jb2xsYXBzZScpO1xuICAgIH1cblxuICAgIGlmICh0aGlzLmV4cGFuZCA9PT0gdHJ1ZSB8fCB0aGlzLmV4cGFuZCA9PT0gJ3hzJykge1xuICAgICAgdGhpcy5yZW5kZXJlci5hZGRDbGFzcyh0aGlzLm5hdi5uYXRpdmVFbGVtZW50LCAnbmF2YmFyLWV4cGFuZCcpO1xuICAgIH0gZWxzZSBpZiAoXG4gICAgICB0aGlzLmV4cGFuZCA9PT0gJ3NtJyB8fFxuICAgICAgdGhpcy5leHBhbmQgPT09ICdtZCcgfHxcbiAgICAgIHRoaXMuZXhwYW5kID09PSAnbGcnIHx8XG4gICAgICB0aGlzLmV4cGFuZCA9PT0gJ3hsJ1xuICAgICkge1xuICAgICAgdGhpcy5yZW5kZXJlci5hZGRDbGFzcyhcbiAgICAgICAgdGhpcy5uYXYubmF0aXZlRWxlbWVudCxcbiAgICAgICAgYG5hdmJhci1leHBhbmQtJHt0aGlzLmV4cGFuZH1gXG4gICAgICApO1xuICAgIH1cbiAgfVxuXG4gIGhhbmRsZVNjcm9sbCgpIHtcbiAgICBjb25zdCBzY3JvbGxpbmdOYXZiYXJPZmZzZXQgPSB0aGlzLnNjcm9sbGluZ05hdmJhck9mZnNldCB8fCA1MDtcbiAgICBpZiAod2luZG93LnBhZ2VZT2Zmc2V0ID4gc2Nyb2xsaW5nTmF2YmFyT2Zmc2V0KSB7XG4gICAgICB0aGlzLmlzQ29sbGFwc2VkID0gdHJ1ZTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5pc0NvbGxhcHNlZCA9IGZhbHNlO1xuICAgIH1cbiAgfVxufVxuIl19