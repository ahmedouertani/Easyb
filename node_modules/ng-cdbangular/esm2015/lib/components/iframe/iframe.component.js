import { Component, Input, ViewChild, Renderer2, ElementRef, ViewEncapsulation, } from '@angular/core';
export class IframeComponent {
    constructor(elRef, renderer) {
        this.elRef = elRef;
        this.renderer = renderer;
        this.allowfullscreen = true;
        this.title = '';
        this.stateRatio = '';
    }
    ngOnInit() {
        !(this.height || this.width) &&
            this.renderer.addClass(this.elRef.nativeElement, 'embed-responsive');
        this.renderer.addClass(this.elRef.nativeElement, 'iframe-host');
        if (this.ratio) {
            this.renderer.addClass(this.elRef.nativeElement, `embed-responsive-${this.ratio}`);
        }
        else {
            this.renderer.addClass(this.elRef.nativeElement, 'embed-responsive-16by9');
        }
        const ratio = this.ratio;
        let width = this.width;
        let height = this.height;
        let ratioNumber = 9 / 16;
        if (ratio) {
            const newRatio = parseFloat(this.ratio.split('by')[0]) /
                parseFloat(this.ratio.split('by')[1]);
            if (typeof ratioNumber === 'number') {
                ratioNumber = newRatio;
            }
        }
        if (width && !height) {
            height = width * ratioNumber;
        }
        else if (height && !width) {
            width = height * (1 / ratioNumber);
        }
        this.stateHeight = height;
        this.stateWidth = width;
        this.stateRatio = ratio;
    }
    ngAfterViewInit() {
        let iframeAttributes = {
            src: this.src,
            id: this.id || false,
            frameBorder: '0',
            target: '_parent',
            ratio: this.stateRatio || '4by3',
            height: this.stateHeight || '100%',
            name: this.name || undefined,
            width: this.stateWidth || '100%',
            onLoad: this.onLoad || undefined,
            onMouseOver: this.onMouseOver || undefined,
            onMouseOut: this.onMouseOut || undefined,
            sandbox: this.sandbox || undefined,
        };
        const returnAttributes = (attributes) => {
            const newAttributesObject = Object.keys(attributes).reduce((previousValue, currentElement) => {
                if (attributes[currentElement]) {
                    previousValue[currentElement] = attributes[currentElement];
                }
                return previousValue;
            }, {});
            return newAttributesObject;
        };
        this.iframeAttributes = returnAttributes(iframeAttributes);
        Object.keys(this.iframeAttributes).forEach((attribute) => {
            this.renderer.setAttribute(this.iframe.nativeElement, attribute, this.iframeAttributes[attribute]);
        });
    }
}
IframeComponent.decorators = [
    { type: Component, args: [{
                selector: 'CDBIframe',
                template: "<iframe #iframe class=\"embed-responsive-item\" [attr.allow]=\"allowfullscreen ? 'fullscreen' : null\" [title]=\"title\">\n</iframe>",
                encapsulation: ViewEncapsulation.None,
                styles: [".iframe-host{position:relative}.iframe-host embed,.iframe-host iframe,.iframe-host object,.iframe-host video{border:0;bottom:0;left:0;margin:0 auto;position:absolute;top:0}"]
            },] }
];
IframeComponent.ctorParameters = () => [
    { type: ElementRef },
    { type: Renderer2 }
];
IframeComponent.propDecorators = {
    iframe: [{ type: ViewChild, args: ['iframe', { static: false },] }],
    allowfullscreen: [{ type: Input }],
    id: [{ type: Input }],
    name: [{ type: Input }],
    onMouseOver: [{ type: Input }],
    onMouseOut: [{ type: Input }],
    onLoad: [{ type: Input }],
    sandbox: [{ type: Input }],
    src: [{ type: Input }],
    style: [{ type: Input }],
    title: [{ type: Input }],
    ratio: [{ type: Input }],
    height: [{ type: Input }],
    width: [{ type: Input }]
};
//# sourceMappingURL=data:application/json;base64,