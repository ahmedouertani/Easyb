import { Component, ElementRef, HostBinding, Input, Renderer2, ViewEncapsulation } from '@angular/core';
import { BehaviorSubject } from 'rxjs';
export class CdbTableDirective {
    constructor(el, renderer) {
        this.el = el;
        this.renderer = renderer;
        this.entries = 5;
        this._activePage = new BehaviorSubject(0);
        this._dataSource = [];
        this._entries = 5;
        this.pages = [];
        this.paginateRows = () => {
            let pages = [];
            const pagesAmount = this.numberOfPages();
            for (let i = 1; i <= pagesAmount; i++) {
                const pageEndIndex = i * this.getEntries();
                pages.push(this.getDataSource().slice(pageEndIndex - this.getEntries(), pageEndIndex));
            }
            this.pages = pages;
        };
    }
    setDataSource(data) {
        this._dataSource = data;
    }
    getDataSource() {
        return this._dataSource;
    }
    setEntries(num) {
        this._entries = num;
    }
    getEntries() {
        return this._entries;
    }
    getPages() {
        return this.pages;
    }
    setPages() {
        this.paginateRows();
    }
    changeActivePage(page) {
        this._activePage.next(page);
    }
    getActivePage() {
        return this.activePage;
    }
    filterData(searchKey) {
        this.changeActivePage(0);
        return this.getDataSource().filter((data) => {
            return Object.keys(data).some((key) => {
                if (data[key]) {
                    return JSON.stringify(data)
                        .toLowerCase()
                        .includes(searchKey);
                }
            });
        });
    }
    numberOfPages() {
        return Math.ceil(this.getDataSource().length / this.getEntries());
    }
    ngOnInit() {
        this._activePage.subscribe(data => {
            this.activePage = data;
        });
        this.renderer.addClass(this.el.nativeElement, 'table');
        // this.paginateRowsInitialy()
    }
}
CdbTableDirective.decorators = [
    { type: Component, args: [{
                selector: '[CdbTable]',
                exportAs: 'CdbTable',
                template: '<ng-content></ng-content>',
                encapsulation: ViewEncapsulation.None
            },] }
];
CdbTableDirective.ctorParameters = () => [
    { type: ElementRef },
    { type: Renderer2 }
];
CdbTableDirective.propDecorators = {
    striped: [{ type: Input }, { type: HostBinding, args: ['class.table-striped',] }],
    autoWidth: [{ type: Input }, { type: HostBinding, args: ['class.w-auto',] }],
    bordered: [{ type: Input }, { type: HostBinding, args: ['class.table-bordered',] }],
    borderless: [{ type: Input }, { type: HostBinding, args: ['class.table-borderless',] }],
    btn: [{ type: Input }, { type: HostBinding, args: ['class.btn-table',] }],
    fixed: [{ type: Input }, { type: HostBinding, args: ['class.table-fixed',] }],
    hoverable: [{ type: Input }, { type: HostBinding, args: ['class.table-hover',] }],
    small: [{ type: Input }, { type: HostBinding, args: ['class.table-sm',] }],
    responsive: [{ type: Input }, { type: HostBinding, args: ['class.table-responsive',] }],
    entries: [{ type: Input }]
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2RiLXRhYmxlLmRpcmVjdGl2ZS5qcyIsInNvdXJjZVJvb3QiOiIvVXNlcnMvYXBwbGUvRG9jdW1lbnRzL3Byb2plY3RzL3Byb2plY3RfZGV2d2FyZXMvQ29udHJhc3QtQm9vdHN0cmFwLUFuZ3VsYXIvcHJvamVjdHMvbmctY2RiYW5ndWxhci9zcmMvIiwic291cmNlcyI6WyJsaWIvY29tcG9uZW50cy90YWJsZS9kaXJlY3RpdmVzL2NkYi10YWJsZS5kaXJlY3RpdmUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFpQixTQUFTLEVBQWEsVUFBVSxFQUFFLFdBQVcsRUFBRSxLQUFLLEVBQVUsU0FBUyxFQUFFLGlCQUFpQixFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQzFJLE9BQU8sRUFBRSxlQUFlLEVBQWMsTUFBTSxNQUFNLENBQUM7QUFPbkQsTUFBTSxPQUFPLGlCQUFpQjtJQXlDNUIsWUFBb0IsRUFBYyxFQUFVLFFBQW1CO1FBQTNDLE9BQUUsR0FBRixFQUFFLENBQVk7UUFBVSxhQUFRLEdBQVIsUUFBUSxDQUFXO1FBSnRELFlBQU8sR0FBRyxDQUFDLENBQUM7UUFDckIsZ0JBQVcsR0FBRyxJQUFJLGVBQWUsQ0FBQyxDQUFDLENBQUMsQ0FBQTtRQUs1QixnQkFBVyxHQUFRLEVBQUUsQ0FBQztRQUN0QixhQUFRLEdBQUcsQ0FBQyxDQUFDO1FBRXJCLFVBQUssR0FBVSxFQUFFLENBQUM7UUFzRGxCLGlCQUFZLEdBQUcsR0FBRyxFQUFFO1lBQ2xCLElBQUksS0FBSyxHQUFHLEVBQUUsQ0FBQTtZQUNkLE1BQU0sV0FBVyxHQUFHLElBQUksQ0FBQyxhQUFhLEVBQUUsQ0FBQztZQUN6QyxLQUFLLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLElBQUksV0FBVyxFQUFFLENBQUMsRUFBRSxFQUFFO2dCQUNyQyxNQUFNLFlBQVksR0FBRyxDQUFDLEdBQUcsSUFBSSxDQUFDLFVBQVUsRUFBRSxDQUFDO2dCQUMzQyxLQUFLLENBQUMsSUFBSSxD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QUFXLFNBQUMsd0JBQXdCO3NCQUdwQyxLQUFLIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQWZ0ZXJWaWV3SW5pdCwgQ29tcG9uZW50LCBEaXJlY3RpdmUsIEVsZW1lbnRSZWYsIEhvc3RCaW5kaW5nLCBJbnB1dCwgT25Jbml0LCBSZW5kZXJlcjIsIFZpZXdFbmNhcHN1bGF0aW9uIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBCZWhhdmlvclN1YmplY3QsIE9ic2VydmFibGUgfSBmcm9tICdyeGpzJztcbkBDb21wb25lbnQoe1xuICBzZWxlY3RvcjogJ1tDZGJUYWJsZV0nLFxuICBleHBvcnRBczogJ0NkYlRhYmxlJyxcbiAgdGVtcGxhdGU6ICc8bmctY29udGVudD48L25nLWNvbnRlbnQ+JyxcbiAgZW5jYXBzdWxhdGlvbjogVmlld0VuY2Fwc3VsYXRpb24uTm9uZSxcbn0pXG5leHBvcnQgY2xhc3MgQ2RiVGFibGVEaXJlY3RpdmUgaW1wbGVtZW50cyBPbkluaXQge1xuICBASW5wdXQoKVxuICBASG9zdEJpbmRpbmcoJ2NsYXNzLnRhYmxlLXN0cmlwZWQnKVxuICBzdHJpcGVkOiBib29sZWFuO1xuXG4gIEBJbnB1dCgpXG4gIEBIb3N0QmluZGluZygnY2xhc3Mudy1hdXRvJylcbiAgYXV0b1dpZHRoOiBib29sZWFuO1xuXG4gIEBJbnB1dCgpXG4gIEBIb3N0QmluZGluZygnY2xhc3MudGFibGUtYm9yZGVyZWQnKVxuICBib3JkZXJlZDogYm9vbGVhbjtcblxuICBASW5wdXQoKVxuICBASG9zdEJpbmRpbmcoJ2NsYXNzLnRhYmxlLWJvcmRlcmxlc3MnKVxuICBib3JkZXJsZXNzOiBib29sZWFuO1xuXG4gIEBJbnB1dCgpXG4gIEBIb3N0QmluZGluZygnY2xhc3MuYnRuLXRhYmxlJylcbiAgYnRuOiBib29sZWFuO1xuXG4gIEBJbnB1dCgpXG4gIEBIb3N0QmluZGluZygnY2xhc3MudGFibGUtZml4ZWQnKVxuICBmaXhlZDogYm9vbGVhbjtcblxuICBASW5wdXQoKVxuICBASG9zdEJpbmRpbmcoJ2NsYXNzLnRhYmxlLWhvdmVyJylcbiAgaG92ZXJhYmxlOiBib29sZWFuO1xuXG4gIEBJbnB1dCgpXG4gIEBIb3N0QmluZGluZygnY2xhc3MudGFibGUtc20nKVxuICBzbWFsbDogYm9vbGVhbjtcblxuICBASW5wdXQoKVxuICBASG9zdEJpbmRpbmcoJ2NsYXNzLnRhYmxlLXJlc3BvbnNpdmUnKVxuICByZXNwb25zaXZlOiBib29sZWFuO1xuICBcbiAgQElucHV0KCkgZW50cmllcyA9IDU7XG4gIF9hY3RpdmVQYWdlID0gbmV3IEJlaGF2aW9yU3ViamVjdCgwKVxuICBhY3RpdmVQYWdlO1xuXG4gIGNvbnN0cnVjdG9yKHByaXZhdGUgZWw6IEVsZW1lbnRSZWYsIHByaXZhdGUgcmVuZGVyZXI6IFJlbmRlcmVyMikge31cblxuICBwcml2YXRlIF9kYXRhU291cmNlOiBhbnkgPSBbXTtcbiAgcHJpdmF0ZSBfZW50cmllcyA9IDU7XG5cbiAgcGFnZXM6IGFueVtdID0gW107XG5cbiAgc2V0RGF0YVNvdXJjZShkYXRhKSB7XG4gICAgdGhpcy5fZGF0YVNvdXJjZSA9IGRhdGFcbiAgfVxuXG4gIGdldERhdGFTb3VyY2UoKSB7XG4gICAgcmV0dXJuIHRoaXMuX2RhdGFTb3VyY2U7XG4gIH1cblxuICBzZXRFbnRyaWVzKG51bSkge1xuICAgIHRoaXMuX2VudHJpZXMgPSBudW1cbiAgfVxuXG4gIGdldEVudHJpZXMoKSB7XG4gICAgcmV0dXJuIHRoaXMuX2VudHJpZXM7XG4gIH1cblxuICBnZXRQYWdlcygpIHtcbiAgICByZXR1cm4gdGhpcy5wYWdlcztcbiAgfVxuXG4gIHNldFBhZ2VzKCkge1xuICAgIHRoaXMucGFnaW5hdGVSb3dzKClcbiAgfVxuXG4gIGNoYW5nZUFjdGl2ZVBhZ2UocGFnZSkge1xuICAgIHRoaXMuX2FjdGl2ZVBhZ2UubmV4dChwYWdlKVxuICB9XG5cbiAgZ2V0QWN0aXZlUGFnZSgpe1xuICAgIHJldHVybiB0aGlzLmFjdGl2ZVBhZ2VcbiAgfVxuXG4gIGZpbHRlckRhdGEoc2VhcmNoS2V5KSB7XG4gICAgdGhpcy5jaGFuZ2VBY3RpdmVQYWdlKDApXG4gICAgcmV0dXJuIHRoaXMuZ2V0RGF0YVNvdXJjZSgpLmZpbHRlcigoZGF0YSkgPT4ge1xuICAgICAgcmV0dXJuIE9iamVjdC5rZXlzKGRhdGEpLnNvbWUoKGtleTogYW55KSA9PiB7XG4gICAgICAgIGlmIChkYXRhW2tleV0pIHtcbiAgICAgICAgICByZXR1cm4gSlNPTi5zdHJpbmdpZnkoZGF0YSlcbiAgICAgICAgICAgIC50b0xvd2VyQ2FzZSgpXG4gICAgICAgICAgICAuaW5jbHVkZXMoc2VhcmNoS2V5KSBhcyBhbnk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH0pXG4gIH1cblxuICBcblxuICBudW1iZXJPZlBhZ2VzKCkge1xuICAgIHJldHVybiBNYXRoLmNlaWwodGhpcy5nZXREYXRhU291cmNlKCkubGVuZ3RoIC8gdGhpcy5nZXRFbnRyaWVzKCkpO1xuICB9XG5cbiAgXG4gIHBhZ2luYXRlUm93cyA9ICgpID0+IHtcbiAgICBsZXQgcGFnZXMgPSBbXVxuICAgIGNvbnN0IHBhZ2VzQW1vdW50ID0gdGhpcy5udW1iZXJPZlBhZ2VzKCk7XG4gICAgZm9yIChsZXQgaSA9IDE7IGkgPD0gcGFnZXNBbW91bnQ7IGkrKykge1xuICAgICAgY29uc3QgcGFnZUVuZEluZGV4ID0gaSAqIHRoaXMuZ2V0RW50cmllcygpO1xuICAgICAgcGFnZXMucHVzaCh0aGlzLmdldERhdGFTb3VyY2UoKS5zbGljZShwYWdlRW5kSW5kZXggLSB0aGlzLmdldEVudHJpZXMoKSwgcGFnZUVuZEluZGV4KSk7XG4gICAgfVxuICAgIHRoaXMucGFnZXMgPSBwYWdlc1xuICB9O1xuXG5cbiAgbmdPbkluaXQoKSB7XG4gICAgdGhpcy5fYWN0aXZlUGFnZS5zdWJzY3JpYmUoZGF0YSA9PiB7XG4gICAgICB0aGlzLmFjdGl2ZVBhZ2UgPSBkYXRhXG4gICAgfSlcbiAgICB0aGlzLnJlbmRlcmVyLmFkZENsYXNzKHRoaXMuZWwubmF0aXZlRWxlbWVudCwgJ3RhYmxlJyk7XG4gICAgLy8gdGhpcy5wYWdpbmF0ZVJvd3NJbml0aWFseSgpXG4gIH1cbiAgXG59XG5cbiJdfQ==