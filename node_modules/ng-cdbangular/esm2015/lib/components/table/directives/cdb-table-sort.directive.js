import { Directive, ElementRef, EventEmitter, HostListener, Input, Output, Renderer2 } from '@angular/core';
export class CdbTableSortDirective {
    constructor(el, renderer) {
        this.el = el;
        this.renderer = renderer;
        this.sortEnd = new EventEmitter();
        this.dataSource = [];
        this.direction = 'asc';
    }
    onclick() {
        if (this.enableSort === 'enabled') {
            this.sortData(this.trimWhiteSigns(this.sortBy.toString().toLowerCase()));
        }
    }
    trimWhiteSigns(str) {
        return str.replace(/ /g, '');
    }
    sortData(key) {
        this.dataSource.sort((a, b) => {
            return this.direction === "asc"
                ? a[key] < b[key]
                    ? -1
                    : 1
                : a[key] > b[key]
                    ? -1
                    : 1;
        });
        this.tableEl.setDataSource(this.dataSource);
        this.tableEl.setPages();
        this.sortEnd.emit();
        this.direction = this.direction === 'asc' ? 'dsc' : 'asc';
    }
}
CdbTableSortDirective.decorators = [
    { type: Directive, args: [{
                selector: '[CdbTableSort]'
            },] }
];
CdbTableSortDirective.ctorParameters = () => [
    { type: ElementRef },
    { type: Renderer2 }
];
CdbTableSortDirective.propDecorators = {
    sortEnd: [{ type: Output }],
    tableEl: [{ type: Input }],
    dataSource: [{ type: Input, args: ['CdbTableSort',] }],
    sortBy: [{ type: Input }],
    enableSort: [{ type: Input }],
    onclick: [{ type: HostListener, args: ['click',] }]
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2RiLXRhYmxlLXNvcnQuZGlyZWN0aXZlLmpzIiwic291cmNlUm9vdCI6Ii9Vc2Vycy9hcHBsZS9Eb2N1bWVudHMvcHJvamVjdHMvcHJvamVjdF9kZXZ3YXJlcy9Db250cmFzdC1Cb290c3RyYXAtQW5ndWxhci9wcm9qZWN0cy9uZy1jZGJhbmd1bGFyL3NyYy8iLCJzb3VyY2VzIjpbImxpYi9jb21wb25lbnRzL3RhYmxlL2RpcmVjdGl2ZXMvY2RiLXRhYmxlLXNvcnQuZGlyZWN0aXZlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxTQUFTLEVBQUUsVUFBVSxFQUFFLFlBQVksRUFBRSxZQUFZLEVBQUUsS0FBSyxFQUFFLE1BQU0sRUFBRSxTQUFTLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFNNUcsTUFBTSxPQUFPLHFCQUFxQjtJQVNoQyxZQUFvQixFQUFjLEVBQVUsUUFBbUI7UUFBM0MsT0FBRSxHQUFGLEVBQUUsQ0FBWTtRQUFVLGFBQVEsR0FBUixRQUFRLENBQVc7UUFQckQsWUFBTyxHQUF3QixJQUFJLFlBQVksRUFBUyxDQUFDO1FBRzVDLGVBQVUsR0FBZSxFQUFFLENBQUM7UUFHbkQsY0FBUyxHQUFHLEtBQUssQ0FBQTtJQUNrRCxDQUFDO0lBRTdDLE9BQU87UUFDNUIsSUFBSSxJQUFJLENBQUMsVUFBVSxLQUFLLFNBQVMsRUFBRTtZQUNqQyxJQUFJLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxjQUFjLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxRQUFRLEVBQUUsQ0FBQyxXQUFXLEVBQUUsQ0FBQyxDQUFDLENBQUE7U0FDekU7SUFDSCxDQUFDO0lBRUQsY0FBYyxDQUFDLEdBQVE7UUFDckIsT0FBTyxHQUFHLENBQUMsT0FBTyxDQUFDLElBQUksRUFBRSxFQUFFLENBQUMsQ0FBQztJQUMvQixDQUFDO0lBRUQsUUFBUSxDQUFDLEdBQUc7UUFDVixJQUFJLENBQUMsVUFBVSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLEVBQUUsRUFBRTtZQUM1QixPQUFPLElBQUksQ0FBQyxTQUFTLEtBQUssS0FBSztnQkFDN0IsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLENBQUMsR0FBRyxDQUFDO29CQUNmLENBQUMsQ0FBQyxDQUFDLENBQUM7b0JBQ0osQ0FBQyxDQUFDLENBQUM7Z0JBQ0wsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLENBQUMsR0FBRyxDQUFDO29CQUNqQixDQUFDLENBQUMsQ0FBQyxDQUFDO29CQUNKLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDUixDQUFDLENBQUMsQ0FBQTtRQUNGLElBQUksQ0FBQyxPQUFPLENBQUMsYUFBYSxDQUFDLElBQUksQ0FBQyxVQUFVLENBQUMsQ0FBQTtRQUMzQyxJQUFJLENBQUMsT0FBTyxDQUFDLFFBQVEsRUFBRSxDQUFBO1FBQ3ZCLElBQUksQ0FBQyxPQUFPLENBQUMsSUFBSSxFQUFFLENBQUE7UUFDbkIsSUFBSSxDQUFDLFNBQVMsR0FBRyxJQUFJLENBQUMsU0FBUyxLQUFLLEtBQUssQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUE7SUFDM0QsQ0FBQzs7O1lBdENGLFNBQVMsU0FBQztnQkFDVCxRQUFRLEVBQUUsZ0JBQWdCO2FBQzNCOzs7WUFMbUIsVUFBVTtZQUE2QyxTQUFTOzs7c0JBUWpGLE1BQU07c0JBRU4sS0FBSzt5QkFDTCxLQUFLLFNBQUMsY0FBYztxQkFDcEIsS0FBSzt5QkFDTCxLQUFLO3NCQUlMLFlBQVksU0FBQyxPQUFPIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgRGlyZWN0aXZlLCBFbGVtZW50UmVmLCBFdmVudEVtaXR0ZXIsIEhvc3RMaXN0ZW5lciwgSW5wdXQsIE91dHB1dCwgUmVuZGVyZXIyIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBDZGJUYWJsZURpcmVjdGl2ZSB9IGZyb20gJy4uL2RpcmVjdGl2ZXMvY2RiLXRhYmxlLmRpcmVjdGl2ZSc7XG5cbkBEaXJlY3RpdmUoe1xuICBzZWxlY3RvcjogJ1tDZGJUYWJsZVNvcnRdJ1xufSlcbmV4cG9ydCBjbGFzcyBDZGJUYWJsZVNvcnREaXJlY3RpdmUge1xuXG4gIEBPdXRwdXQoKSBzb3J0RW5kOiBFdmVudEVtaXR0ZXI8YW55W10+ID0gbmV3IEV2ZW50RW1pdHRlcjxhbnlbXT4oKTtcblxuICBASW5wdXQoKSB0YWJsZUVsOiBDZGJUYWJsZURpcmVjdGl2ZTtcbiAgQElucHV0KCdDZGJUYWJsZVNvcnQnKSBkYXRhU291cmNlOiBBcnJheTxhbnk+ID0gW107XG4gIEBJbnB1dCgpIHNvcnRCeTogc3RyaW5nO1xuICBASW5wdXQoKSBlbmFibGVTb3J0OiBzdHJpbmc7XG4gIGRpcmVjdGlvbiA9ICdhc2MnXG4gIGNvbnN0cnVjdG9yKHByaXZhdGUgZWw6IEVsZW1lbnRSZWYsIHByaXZhdGUgcmVuZGVyZXI6IFJlbmRlcmVyMikgeyB9XG5cbiAgQEhvc3RMaXN0ZW5lcignY2xpY2snKSBvbmNsaWNrKCkge1xuICAgIGlmICh0aGlzLmVuYWJsZVNvcnQgPT09ICdlbmFibGVkJykge1xuICAgICAgdGhpcy5zb3J0RGF0YSh0aGlzLnRyaW1XaGl0ZVNpZ25zKHRoaXMuc29ydEJ5LnRvU3RyaW5nKCkudG9Mb3dlckNhc2UoKSkpXG4gICAgfVxuICB9XG5cbiAgdHJpbVdoaXRlU2lnbnMoc3RyOiBhbnkpOiBzdHJpbmcge1xuICAgIHJldHVybiBzdHIucmVwbGFjZSgvIC9nLCAnJyk7XG4gIH1cblxuICBzb3J0RGF0YShrZXkpIHtcbiAgICB0aGlzLmRhdGFTb3VyY2Uuc29ydCgoYSwgYikgPT4ge1xuICAgICAgcmV0dXJuIHRoaXMuZGlyZWN0aW9uID09PSBcImFzY1wiXG4gICAgICAgID8gYVtrZXldIDwgYltrZXldXG4gICAgICAgICAgPyAtMVxuICAgICAgICAgIDogMVxuICAgICAgICA6IGFba2V5XSA+IGJba2V5XVxuICAgICAgICA/IC0xXG4gICAgICAgIDogMTtcbiAgICB9KVxuICAgIHRoaXMudGFibGVFbC5zZXREYXRhU291cmNlKHRoaXMuZGF0YVNvdXJjZSlcbiAgICB0aGlzLnRhYmxlRWwuc2V0UGFnZXMoKVxuICAgIHRoaXMuc29ydEVuZC5lbWl0KClcbiAgICB0aGlzLmRpcmVjdGlvbiA9IHRoaXMuZGlyZWN0aW9uID09PSAnYXNjJyA/ICdkc2MnIDogJ2FzYydcbiAgfVxufVxuIl19