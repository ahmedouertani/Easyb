import { Component, Input, Renderer2, ViewChild, } from '@angular/core';
import { trigger, state, style, transition, animate, query, } from '@angular/animations';
export class CollapseComponent {
    constructor(renderer) {
        this.renderer = renderer;
        this.isOpen = false;
        this.navbar = false;
        this.expand = false;
        this.sm = 576;
        this.md = 768;
        this.lg = 992;
        this.xl = 1200;
    }
    ngOnInit() {
        if (this.navbar === true) {
            if (this.expand === false) {
                this.isOpen = false;
            }
            else {
                this.manageIsOpenState(this.expand);
            }
            window.addEventListener('resize', () => {
                this.manageIsOpenState(this.expand);
                this.manageCollapseClassAndAnimationState();
            });
        }
        this.manageCollapseClassAndAnimationState();
    }
    ngAfterViewInit() {
        if (this.navbar === true) {
            this.renderer.addClass(this.cdbCollapse.nativeElement, 'navbar-collapse');
        }
    }
    toggleCollapse() {
        this.isOpen ? this.hide() : this.show();
    }
    show() {
        this.isOpen = true;
        this.expandAnimationState = 'expanded';
    }
    hide() {
        this.isOpen = false;
        this.expandAnimationState = 'collapsed';
    }
    onExpandBodyStart(event) {
        this.class = 'collapsing';
    }
    onExpandBodyDone(event) {
        if (this.isOpen === true) {
            this.class = 'collapse show';
        }
        else {
            this.class = 'collapse';
        }
    }
    manageIsOpenState(expand) {
        if (this.expand !== false) {
            if (expand === 'sm') {
                this.viewWidth = this.sm;
            }
            else if (expand === 'md') {
                this.viewWidth = this.md;
            }
            else if (expand === 'lg') {
                this.viewWidth = this.lg;
            }
            else if (expand === 'xl') {
                this.viewWidth = this.xl;
            }
            if (matchMedia(`(min-width: ${this.viewWidth}px)`).matches) {
                this.isOpen = true;
            }
            if (matchMedia(`(max-width: ${this.viewWidth - 0.02}px)`).matches) {
                this.isOpen = false;
            }
        }
    }
    manageCollapseClassAndAnimationState() {
        if (this.isOpen === true) {
            this.class = 'collapse show';
            this.expandAnimationState = 'expanded';
        }
        else {
            this.class = 'collapse';
            this.expandAnimationState = 'collapsed';
        }
    }
}
CollapseComponent.decorators = [
    { type: Component, args: [{
                selector: 'CDBCollapse',
                exportAs: 'cdbCollapse',
                template: "<ng-container [ngSwitch]=\"navbar === true\">\n    <ng-container *ngSwitchCase=\"true\">\n        <div #cdbCollapse [@expandBody2]=\"expandAnimationState\" (@expandBody2.start)=\"onExpandBodyStart($event)\"\n            (@expandBody2.done)=\"onExpandBodyDone($event)\" [style]=\"style\">\n            <ng-container *ngTemplateOutlet=\"content\"></ng-container>\n        </div>\n    </ng-container>\n\n    <ng-container *ngSwitchCase=\"false\">\n        <div #cdbCollapse [@expandBody]=\"expandAnimationState\" (@expandBody.start)=\"onExpandBodyStart($event)\"\n            (@expandBody.done)=\"onExpandBodyDone($event)\" [style]=\"style\">\n            <ng-container *ngTemplateOutlet=\"content\"></ng-container>\n        </div>\n    </ng-container>\n</ng-container>\n\n<ng-template #content>\n    <ng-content></ng-content>\n</ng-template>",
                animations: [
                    trigger('expandBody', [
                        state('collapsed', style({ height: '0px', overflow: 'hidden' })),
                        state('expanded', style({ height: '*', overflow: 'visible' })),
                        transition('expanded <=> collapsed', animate('350ms ease')),
                    ]),
                    trigger('expandBody2', [
                        state('collapsed', style({ height: '0px', overflow: 'hidden' })),
                        state('expanded', style({ height: '*', overflow: 'visible' })),
                        transition('expanded <=> collapsed', [
                            query('*', style({ opacity: 0 }), {
                                optional: true,
                            }),
                            animate('350ms ease'),
                        ]),
                    ]),
                ],
                styles: [".primary{background-color:#276ef1;border-color:#276ef1;box-sizing:border-box;color:#fff}.primary:hover{background-color:rgba(39,110,241,.7411764705882353);color:#fff}.secondary{background-color:#7356bf;border-color:#7356bf;color:#fff}.secondary:hover{background-color:rgba(115,86,191,.7411764705882353);color:#fff}.success{background-color:#05944f;border-color:#05944f;color:#fff}.success:hover{background-color:rgba(5,148,79,.7411764705882353);color:#fff}.danger{background-color:#e11900;border-color:#e11900;color:#fff}.danger:hover{background-color:rgba(225,25,0,.7411764705882353);color:#fff}.warning{background-color:#ffe975;border-color:#ffe975;color:#66512c}.warning:hover{background-color:rgba(255,233,117,.7411764705882353);color:#66512c}.dark{background-color:#000;border-color:#000;color:#fff}.dark:hover{background-color:rgba(0,0,0,.7411764705882353);color:#fff}.light{background-color:#eee;border-color:#eee;color:#000}.light:hover{background-color:hsla(0,0%,93.3%,.7411764705882353);color:#000}.white{background-color:#fff;border-color:#fff;color:#000}.white:hover{background-color:hsla(0,0%,100%,.8352941176470589);color:#000}.info{background-color:#17a2b8;border-color:#17a2b8;color:#fff}.info:hover{background-color:rgba(23,162,184,.7411764705882353);color:#fff}"]
            },] }
];
CollapseComponent.ctorParameters = () => [
    { type: Renderer2 }
];
CollapseComponent.propDecorators = {
    style: [{ type: Input }],
    isOpen: [{ type: Input }],
    navbar: [{ type: Input }],
    expand: [{ type: Input }],
    cdbCollapse: [{ type: ViewChild, args: ['cdbCollapse', { static: false },] }]
};
//# sourceMappingURL=data:application/json;base64,