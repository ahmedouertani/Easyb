import { Component, ElementRef, Input, Renderer2, ViewChild, ViewEncapsulation, } from '@angular/core';
export class ListgroupitemComponent {
    constructor(elRef, renderer) {
        this.elRef = elRef;
        this.renderer = renderer;
        // @Input() routerLink: string = '';
        this.href = '';
        this.active = false;
        this.hover = false;
    }
    ngOnInit() { }
    ngAfterViewInit() {
        this.renderer.addClass(this.elRef.nativeElement, 'list-group-item');
        if (this.href === '') {
            this.renderer.addClass(this.li.nativeElement, 'w-100');
        }
        if (this.active === true) {
            this.renderer.addClass(this.elRef.nativeElement, 'active');
            if (this.href !== '') {
                this.renderer.addClass(this.Link.link.nativeElement, 'text-white');
            }
            else {
                this.renderer.addClass(this.li.nativeElement, 'text-white');
            }
        }
        if (this.hover === true) {
            this.renderer.addClass(this.elRef.nativeElement, 'list-group-item-action');
        }
        if (this.color) {
            this.renderer.addClass(this.elRef.nativeElement, this.color);
        }
    }
}
ListgroupitemComponent.decorators = [
    { type: Component, args: [{
                selector: 'CDBListGroupItem',
                template: "<ng-container [ngSwitch]=\"href !== ''\">\n\n    <ng-container *ngSwitchCase=true>\n        <CDBLink class=\"CDBListGroupLink {{ class }}\" #Link [to]=\"href\">\n            <ng-container *ngTemplateOutlet=\"content\"></ng-container>\n        </CDBLink>\n    </ng-container>\n\n    <ng-container *ngSwitchCase=false>\n        <li #li class=\"CDBListGroupLi {{ class }}\">\n            <ng-container *ngTemplateOutlet=\"content\"></ng-container>\n        </li>\n    </ng-container>\n\n    <ng-template #content>\n        <ng-content></ng-content>\n    </ng-template>\n\n</ng-container>",
                encapsulation: ViewEncapsulation.None,
                styles: [".primary{background-color:#276ef1;border-color:#276ef1;box-sizing:border-box;color:#fff}.primary:hover{background-color:rgba(39,110,241,.7411764705882353);color:#fff}.secondary{background-color:#7356bf;border-color:#7356bf;color:#fff}.secondary:hover{background-color:rgba(115,86,191,.7411764705882353);color:#fff}.success{background-color:#05944f;border-color:#05944f;color:#fff}.success:hover{background-color:rgba(5,148,79,.7411764705882353);color:#fff}.danger{background-color:#e11900;border-color:#e11900;color:#fff}.danger:hover{background-color:rgba(225,25,0,.7411764705882353);color:#fff}.warning{background-color:#ffe975;border-color:#ffe975;color:#66512c}.warning:hover{background-color:rgba(255,233,117,.7411764705882353);color:#66512c}.dark{background-color:#000;border-color:#000;color:#fff}.dark:hover{background-color:rgba(0,0,0,.7411764705882353);color:#fff}.light{background-color:#eee;border-color:#eee;color:#000}.light:hover{background-color:hsla(0,0%,93.3%,.7411764705882353);color:#000}.white{background-color:#fff;border-color:#fff;color:#000}.white:hover{background-color:hsla(0,0%,100%,.8352941176470589);color:#000}.info{background-color:#17a2b8;border-color:#17a2b8;color:#fff}.info:hover{background-color:rgba(23,162,184,.7411764705882353);color:#fff}.CDBListGroupLi{list-style:none!important}.CDBListGroupLi .nav-link{padding:0}.CDBListGroupLi .nav-link:hover,.CDBListGroupLink{color:#212529}.CDBListGroupLink .nav-link{padding:0}.CDBListGroupLink .nav-link:hover{color:#212529}"]
            },] }
];
ListgroupitemComponent.ctorParameters = () => [
    { type: ElementRef },
    { type: Renderer2 }
];
ListgroupitemComponent.propDecorators = {
    href: [{ type: Input }],
    class: [{ type: Input }],
    color: [{ type: Input }],
    active: [{ type: Input }],
    hover: [{ type: Input }],
    li: [{ type: ViewChild, args: ['li', { static: false },] }],
    Link: [{ type: ViewChild, args: ['Link', { static: false },] }]
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibGlzdGdyb3VwaXRlbS5jb21wb25lbnQuanMiLCJzb3VyY2VSb290IjoiL1VzZXJzL2FwcGxlL0RvY3VtZW50cy9wcm9qZWN0cy9wcm9qZWN0X2RldndhcmVzL0NvbnRyYXN0LUJvb3RzdHJhcC1Bbmd1bGFyL3Byb2plY3RzL25nLWNkYmFuZ3VsYXIvc3JjLyIsInNvdXJjZXMiOlsibGliL2NvbXBvbmVudHMvbGlzdGdyb3VwL2xpc3Rncm91cGl0ZW0vbGlzdGdyb3VwaXRlbS5jb21wb25lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUVMLFNBQVMsRUFFVCxVQUFVLEVBQ1YsS0FBSyxFQUVMLFNBQVMsRUFDVCxTQUFTLEVBQ1QsaUJBQWlCLEdBQ2xCLE1BQU0sZUFBZSxDQUFDO0FBU3ZCLE1BQU0sT0FBTyxzQkFBc0I7SUFXakMsWUFBb0IsS0FBaUIsRUFBVSxRQUFtQjtRQUE5QyxVQUFLLEdBQUwsS0FBSyxDQUFZO1FBQVUsYUFBUSxHQUFSLFFBQVEsQ0FBVztRQVZsRSxvQ0FBb0M7UUFDM0IsU0FBSSxHQUFXLEVBQUUsQ0FBQztRQUdsQixXQUFNLEdBQVksS0FBSyxDQUFDO1FBQ3hCLFVBQUssR0FBWSxLQUFLLENBQUM7SUFLcUMsQ0FBQztJQUV0RSxRQUFRLEtBQVUsQ0FBQztJQUVuQixlQUFlO1FBQ2IsSUFBSSxDQUFDLFFBQVEsQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxhQUFhLEVBQUUsaUJBQWlCLENBQUMsQ0FBQztRQUVwRSxJQUFJLElBQUksQ0FBQyxJQUFJLEtBQUssRUFBRSxFQUFFO1lBQ3BCLElBQUksQ0FBQyxRQUFRLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsYUFBYSxFQUFFLE9BQU8sQ0FBQyxDQUFDO1NBQ3hEO1FBRUQsSUFBSSxJQUFJLENBQUMsTUFBTSxLQUFLLElBQUksRUFBRTtZQUN4QixJQUFJLENBQUMsUUFBUSxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLGFBQWEsRUFBRSxRQUFRLENBQUMsQ0FBQztZQUUzRCxJQUFJLElBQUksQ0FBQyxJQUFJLEtBQUssRUFBRSxFQUFFO2dCQUNwQixJQUFJLENBQUMsUUFBUSxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxhQUFhLEVBQUUsWUFBWSxDQUFDLENBQUM7YUFDcEU7aUJBQU07Z0JBQ0wsSUFBSSxDQUFDLFFBQVEsQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxhQUFhLEVBQUUsWUFBWSxDQUFDLENBQUM7YUFDN0Q7U0FDRjtRQUVELElBQUksSUFBSSxDQUFDLEtBQUssS0FBSyxJQUFJLEVBQUU7WUFDdkIsSUFBSSxDQUFDLFFBQVEsQ0FBQyxRQUFRLENBQ3BCLElBQUksQ0FBQyxLQUFLLENBQUMsYUFBYSxFQUN4Qix3QkFBd0IsQ0FDekIsQ0FBQztTQUNIO1FBRUQsSUFBSSxJQUFJLENBQUMsS0FBSyxFQUFFO1lBQ2QsSUFBSSxDQUFDLFFBQVEsQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxhQUFhLEVBQUUsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDO1NBQzlEO0lBQ0gsQ0FBQzs7O1lBaERGLFNBQVMsU0FBQztnQkFDVCxRQUFRLEVBQUUsa0JBQWtCO2dCQUM1QixvbEJBQTZDO2dCQUU3QyxhQUFhLEVBQUUsaUJBQWlCLENBQUMsSUFBSTs7YUFDdEM7OztZQWRDLFVBQVU7WUFHVixTQUFTOzs7bUJBY1IsS0FBSztvQkFDTCxLQUFLO29CQUNMLEtBQUs7cUJBQ0wsS0FBSztvQkFDTCxLQUFLO2lCQUVMLFNBQVMsU0FBQyxJQUFJLEVBQUUsRUFBRSxNQUFNLEVBQUUsS0FBSyxFQUFFO21CQUNqQyxTQUFTLFNBQUMsTUFBTSxFQUFFLEVBQUUsTUFBTSxFQUFFLEtBQUssRUFBRSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7XG4gIEFmdGVyVmlld0luaXQsXG4gIENvbXBvbmVudCxcbiAgQ29udGVudENoaWxkLFxuICBFbGVtZW50UmVmLFxuICBJbnB1dCxcbiAgT25Jbml0LFxuICBSZW5kZXJlcjIsXG4gIFZpZXdDaGlsZCxcbiAgVmlld0VuY2Fwc3VsYXRpb24sXG59IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgTGlua0NvbXBvbmVudCB9IGZyb20gJy4uLy4uL2xpbmsvbGluay5jb21wb25lbnQnO1xuXG5AQ29tcG9uZW50KHtcbiAgc2VsZWN0b3I6ICdDREJMaXN0R3JvdXBJdGVtJyxcbiAgdGVtcGxhdGVVcmw6ICcuL2xpc3Rncm91cGl0ZW0uY29tcG9uZW50Lmh0bWwnLFxuICBzdHlsZVVybHM6IFsnLi9saXN0Z3JvdXBpdGVtLmNvbXBvbmVudC5zY3NzJ10sXG4gIGVuY2Fwc3VsYXRpb246IFZpZXdFbmNhcHN1bGF0aW9uLk5vbmUsXG59KVxuZXhwb3J0IGNsYXNzIExpc3Rncm91cGl0ZW1Db21wb25lbnQgaW1wbGVtZW50cyBPbkluaXQsIEFmdGVyVmlld0luaXQge1xuICAvLyBASW5wdXQoKSByb3V0ZXJMaW5rOiBzdHJpbmcgPSAnJztcbiAgQElucHV0KCkgaHJlZjogc3RyaW5nID0gJyc7XG4gIEBJbnB1dCgpIGNsYXNzOiBzdHJpbmc7XG4gIEBJbnB1dCgpIGNvbG9yOiBzdHJpbmc7XG4gIEBJbnB1dCgpIGFjdGl2ZTogYm9vbGVhbiA9IGZhbHNlO1xuICBASW5wdXQoKSBob3ZlcjogYm9vbGVhbiA9IGZhbHNlO1xuXG4gIEBWaWV3Q2hpbGQoJ2xpJywgeyBzdGF0aWM6IGZhbHNlIH0pIGxpOiBFbGVtZW50UmVmO1xuICBAVmlld0NoaWxkKCdMaW5rJywgeyBzdGF0aWM6IGZhbHNlIH0pIExpbms6IExpbmtDb21wb25lbnQ7XG5cbiAgY29uc3RydWN0b3IocHJpdmF0ZSBlbFJlZjogRWxlbWVudFJlZiwgcHJpdmF0ZSByZW5kZXJlcjogUmVuZGVyZXIyKSB7fVxuXG4gIG5nT25Jbml0KCk6IHZvaWQge31cblxuICBuZ0FmdGVyVmlld0luaXQoKSB7XG4gICAgdGhpcy5yZW5kZXJlci5hZGRDbGFzcyh0aGlzLmVsUmVmLm5hdGl2ZUVsZW1lbnQsICdsaXN0LWdyb3VwLWl0ZW0nKTtcblxuICAgIGlmICh0aGlzLmhyZWYgPT09ICcnKSB7XG4gICAgICB0aGlzLnJlbmRlcmVyLmFkZENsYXNzKHRoaXMubGkubmF0aXZlRWxlbWVudCwgJ3ctMTAwJyk7XG4gICAgfVxuXG4gICAgaWYgKHRoaXMuYWN0aXZlID09PSB0cnVlKSB7XG4gICAgICB0aGlzLnJlbmRlcmVyLmFkZENsYXNzKHRoaXMuZWxSZWYubmF0aXZlRWxlbWVudCwgJ2FjdGl2ZScpO1xuXG4gICAgICBpZiAodGhpcy5ocmVmICE9PSAnJykge1xuICAgICAgICB0aGlzLnJlbmRlcmVyLmFkZENsYXNzKHRoaXMuTGluay5saW5rLm5hdGl2ZUVsZW1lbnQsICd0ZXh0LXdoaXRlJyk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aGlzLnJlbmRlcmVyLmFkZENsYXNzKHRoaXMubGkubmF0aXZlRWxlbWVudCwgJ3RleHQtd2hpdGUnKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAodGhpcy5ob3ZlciA9PT0gdHJ1ZSkge1xuICAgICAgdGhpcy5yZW5kZXJlci5hZGRDbGFzcyhcbiAgICAgICAgdGhpcy5lbFJlZi5uYXRpdmVFbGVtZW50LFxuICAgICAgICAnbGlzdC1ncm91cC1pdGVtLWFjdGlvbidcbiAgICAgICk7XG4gICAgfVxuXG4gICAgaWYgKHRoaXMuY29sb3IpIHtcbiAgICAgIHRoaXMucmVuZGVyZXIuYWRkQ2xhc3ModGhpcy5lbFJlZi5uYXRpdmVFbGVtZW50LCB0aGlzLmNvbG9yKTtcbiAgICB9XG4gIH1cbn1cbiJdfQ==