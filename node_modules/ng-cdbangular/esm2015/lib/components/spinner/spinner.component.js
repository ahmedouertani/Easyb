import { Component, Input, ViewChild, ElementRef, Renderer2, ViewEncapsulation, } from '@angular/core';
export class SpinnerComponent {
    constructor(elRef, renderer) {
        this.elRef = elRef;
        this.renderer = renderer;
        this.color = '';
        this.size = '';
        this.multicolor = false;
    }
    ngOnInit() {
        this.renderer.removeAttribute(this.elRef.nativeElement, 'class');
        this.renderer.removeAttribute(this.elRef.nativeElement, 'style');
    }
    ngAfterViewInit() {
        if (this.class) {
            let classes = this.class.split(' ');
            classes.forEach((className) => {
                this.renderer.addClass(this.circle.nativeElement, className);
            });
        }
        this.renderer.addClass(this.svg.nativeElement, 'spinner');
        if (this.color) {
            this.renderer.addClass(this.circle.nativeElement, this.color);
        }
        if (this.multicolor) {
            this.renderer.addClass(this.circle.nativeElement, 'multicolor');
        }
        let sizeValue = this.size === 'big' ? '100px' : this.size === 'small' ? '30px' : '65px';
        this.renderer.setAttribute(this.svg.nativeElement, 'width', sizeValue);
        this.renderer.setAttribute(this.svg.nativeElement, 'height', sizeValue);
    }
}
SpinnerComponent.decorators = [
    { type: Component, args: [{
                selector: 'CDBSpinner',
                template: "<svg class=\"CDBSpinner\" viewBox=\"0 0 66 66\" #svg xmlns=\"http://www.w3.org/2000/svg\">\n    <circle class=\"CDBSpinnerCircle\" [style]='style' #circle fill=\"none\" stroke-width=\"6\" stroke-linecap=\"round\" cx=\"33\" cy=\"33\" r=\"30\">\n    </circle>\n</svg>",
                encapsulation: ViewEncapsulation.None,
                styles: ["@keyframes rotator{0%{transform:rotate(0deg)}to{transform:rotate(1turn)}}@keyframes colors{0%{stroke:#4285f4}25%{stroke:#de3e35}50%{stroke:#f7c223}75%{stroke:#1b9a59}to{stroke:#4285f4}}@keyframes dash{0%{stroke-dashoffset:187}50%{stroke-dashoffset:46.75;transform:rotate(135deg)}to{stroke-dashoffset:187;transform:rotate(450deg)}}.CDBSpinner{animation-duration:1.4s;animation-iteration-count:infinite;animation-name:rotator;stroke-width:5}.CDBSpinnerCircle{animation:dash 1.4s ease-in-out infinite;stroke:#276ef1;stroke-dasharray:187;stroke-dashoffset:0;transform-origin:center}.CDBSpinnerCircle.warning{stroke:#ffe975}.CDBSpinnerCircle.success{stroke:#05944f}.CDBSpinnerCircle.secondary{stroke:#7356bf}.CDBSpinnerCircle.dark{stroke:#000}.CDBSpinnerCircle.danger{stroke:#e11900}.CDBSpinnerCircle.info{stroke:#17a2b8}.CDBSpinnerCircle.multicolor{animation:dash 1.4s ease-in-out infinite,colors 5.6s ease-in-out infinite}"]
            },] }
];
SpinnerComponent.ctorParameters = () => [
    { type: ElementRef },
    { type: Renderer2 }
];
SpinnerComponent.propDecorators = {
    color: [{ type: Input }],
    size: [{ type: Input }],
    multicolor: [{ type: Input }],
    class: [{ type: Input }],
    style: [{ type: Input }],
    circle: [{ type: ViewChild, args: ['circle', { static: false },] }],
    svg: [{ type: ViewChild, args: ['svg', { static: false },] }]
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3Bpbm5lci5jb21wb25lbnQuanMiLCJzb3VyY2VSb290IjoiL1VzZXJzL2FwcGxlL0RvY3VtZW50cy9wcm9qZWN0cy9wcm9qZWN0X2RldndhcmVzL0NvbnRyYXN0LUJvb3RzdHJhcC1Bbmd1bGFyL3Byb2plY3RzL25nLWNkYmFuZ3VsYXIvc3JjLyIsInNvdXJjZXMiOlsibGliL2NvbXBvbmVudHMvc3Bpbm5lci9zcGlubmVyLmNvbXBvbmVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQ0wsU0FBUyxFQUVULEtBQUssRUFFTCxTQUFTLEVBQ1QsVUFBVSxFQUNWLFNBQVMsRUFDVCxpQkFBaUIsR0FDbEIsTUFBTSxlQUFlLENBQUM7QUFRdkIsTUFBTSxPQUFPLGdCQUFnQjtJQWlCM0IsWUFBb0IsS0FBaUIsRUFBVSxRQUFtQjtRQUE5QyxVQUFLLEdBQUwsS0FBSyxDQUFZO1FBQVUsYUFBUSxHQUFSLFFBQVEsQ0FBVztRQWhCekQsVUFBSyxHQU9ELEVBQUUsQ0FBQztRQUNQLFNBQUksR0FBeUIsRUFBRSxDQUFDO1FBQ2hDLGVBQVUsR0FBWSxLQUFLLENBQUM7SUFPZ0MsQ0FBQztJQUV0RSxRQUFRO1FBQ04sSUFBSSxDQUFDLFFBQVEsQ0FBQyxlQUFlLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxhQUFhLEVBQUUsT0FBTyxDQUFDLENBQUM7UUFDakUsSUFBSSxDQUFDLFFBQVEsQ0FBQyxlQUFlLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxhQUFhLEVBQUUsT0FBTyxDQUFDLENBQUM7SUFDbkUsQ0FBQztJQUVELGVBQWU7UUFDYixJQUFJLElBQUksQ0FBQyxLQUFLLEVBQUU7WUFDZCxJQUFJLE9BQU8sR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQztZQUNwQyxPQUFPLENBQUMsT0FBTyxDQUFDLENBQUMsU0FBUyxFQUFFLEVBQUU7Z0JBQzVCLElBQUksQ0FBQyxRQUFRLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsYUFBYSxFQUFFLFNBQVMsQ0FBQyxDQUFDO1lBQy9ELENBQUMsQ0FBQyxDQUFDO1NBQ0o7UUFFRCxJQUFJLENBQUMsUUFBUSxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLGFBQWEsRUFBRSxTQUFTLENBQUMsQ0FBQztRQUUxRCxJQUFJLElBQUksQ0FBQyxLQUFLLEVBQUU7WUFDZCxJQUFJLENBQUMsUUFBUSxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLGFBQWEsRUFBRSxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUM7U0FDL0Q7UUFFRCxJQUFJLElBQUksQ0FBQyxVQUFVLEVBQUU7WUFDbkIsSUFBSSxDQUFDLFFBQVEsQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxhQUFhLEVBQUUsWUFBWSxDQUFDLENBQUM7U0FDakU7UUFFRCxJQUFJLFNBQVMsR0FDWCxJQUFJLENBQUMsSUFBSSxLQUFLLEtBQUssQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsSUFBSSxLQUFLLE9BQU8sQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUM7UUFDMUUsSUFBSSxDQUFDLFFBQVEsQ0FBQyxZQUFZLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxhQUFhLEVBQUUsT0FBTyxFQUFFLFNBQVMsQ0FBQyxDQUFDO1FBQ3ZFLElBQUksQ0FBQyxRQUFRLENBQUMsWUFBWSxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsYUFBYSxFQUFFLFFBQVEsRUFBRSxTQUFTLENBQUMsQ0FBQztJQUMxRSxDQUFDOzs7WUFwREYsU0FBUyxTQUFDO2dCQUNULFFBQVEsRUFBRSxZQUFZO2dCQUN0QixxUkFBdUM7Z0JBRXZDLGFBQWEsRUFBRSxpQkFBaUIsQ0FBQyxJQUFJOzthQUN0Qzs7O1lBVkMsVUFBVTtZQUNWLFNBQVM7OztvQkFXUixLQUFLO21CQVFMLEtBQUs7eUJBQ0wsS0FBSztvQkFDTCxLQUFLO29CQUNMLEtBQUs7cUJBRUwsU0FBUyxTQUFDLFFBQVEsRUFBRSxFQUFFLE1BQU0sRUFBRSxLQUFLLEVBQUU7a0JBQ3JDLFNBQVMsU0FBQyxLQUFLLEVBQUUsRUFBRSxNQUFNLEVBQUUsS0FBSyxFQUFFIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtcbiAgQ29tcG9uZW50LFxuICBPbkluaXQsXG4gIElucHV0LFxuICBBZnRlclZpZXdJbml0LFxuICBWaWV3Q2hpbGQsXG4gIEVsZW1lbnRSZWYsXG4gIFJlbmRlcmVyMixcbiAgVmlld0VuY2Fwc3VsYXRpb24sXG59IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuXG5AQ29tcG9uZW50KHtcbiAgc2VsZWN0b3I6ICdDREJTcGlubmVyJyxcbiAgdGVtcGxhdGVVcmw6ICcuL3NwaW5uZXIuY29tcG9uZW50Lmh0bWwnLFxuICBzdHlsZVVybHM6IFsnLi9zcGlubmVyLmNvbXBvbmVudC5zY3NzJ10sXG4gIGVuY2Fwc3VsYXRpb246IFZpZXdFbmNhcHN1bGF0aW9uLk5vbmUsXG59KVxuZXhwb3J0IGNsYXNzIFNwaW5uZXJDb21wb25lbnQgaW1wbGVtZW50cyBPbkluaXQsIEFmdGVyVmlld0luaXQge1xuICBASW5wdXQoKSBjb2xvcjpcbiAgICB8ICcnXG4gICAgfCAnd2FybmluZydcbiAgICB8ICdzdWNjZXNzJ1xuICAgIHwgJ3NlY29uZGFyeSdcbiAgICB8ICdkYXJrJ1xuICAgIHwgJ2RhbmdlcidcbiAgICB8ICdpbmZvJyA9ICcnO1xuICBASW5wdXQoKSBzaXplOiAnJyB8ICdiaWcnIHwgJ3NtYWxsJyA9ICcnO1xuICBASW5wdXQoKSBtdWx0aWNvbG9yOiBib29sZWFuID0gZmFsc2U7XG4gIEBJbnB1dCgpIGNsYXNzOiBzdHJpbmc7XG4gIEBJbnB1dCgpIHN0eWxlOiBzdHJpbmc7XG5cbiAgQFZpZXdDaGlsZCgnY2lyY2xlJywgeyBzdGF0aWM6IGZhbHNlIH0pIGNpcmNsZTogRWxlbWVudFJlZjtcbiAgQFZpZXdDaGlsZCgnc3ZnJywgeyBzdGF0aWM6IGZhbHNlIH0pIHN2ZzogRWxlbWVudFJlZjtcblxuICBjb25zdHJ1Y3Rvcihwcml2YXRlIGVsUmVmOiBFbGVtZW50UmVmLCBwcml2YXRlIHJlbmRlcmVyOiBSZW5kZXJlcjIpIHt9XG5cbiAgbmdPbkluaXQoKTogdm9pZCB7XG4gICAgdGhpcy5yZW5kZXJlci5yZW1vdmVBdHRyaWJ1dGUodGhpcy5lbFJlZi5uYXRpdmVFbGVtZW50LCAnY2xhc3MnKTtcbiAgICB0aGlzLnJlbmRlcmVyLnJlbW92ZUF0dHJpYnV0ZSh0aGlzLmVsUmVmLm5hdGl2ZUVsZW1lbnQsICdzdHlsZScpO1xuICB9XG5cbiAgbmdBZnRlclZpZXdJbml0KCkge1xuICAgIGlmICh0aGlzLmNsYXNzKSB7XG4gICAgICBsZXQgY2xhc3NlcyA9IHRoaXMuY2xhc3Muc3BsaXQoJyAnKTtcbiAgICAgIGNsYXNzZXMuZm9yRWFjaCgoY2xhc3NOYW1lKSA9PiB7XG4gICAgICAgIHRoaXMucmVuZGVyZXIuYWRkQ2xhc3ModGhpcy5jaXJjbGUubmF0aXZlRWxlbWVudCwgY2xhc3NOYW1lKTtcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIHRoaXMucmVuZGVyZXIuYWRkQ2xhc3ModGhpcy5zdmcubmF0aXZlRWxlbWVudCwgJ3NwaW5uZXInKTtcblxuICAgIGlmICh0aGlzLmNvbG9yKSB7XG4gICAgICB0aGlzLnJlbmRlcmVyLmFkZENsYXNzKHRoaXMuY2lyY2xlLm5hdGl2ZUVsZW1lbnQsIHRoaXMuY29sb3IpO1xuICAgIH1cblxuICAgIGlmICh0aGlzLm11bHRpY29sb3IpIHtcbiAgICAgIHRoaXMucmVuZGVyZXIuYWRkQ2xhc3ModGhpcy5jaXJjbGUubmF0aXZlRWxlbWVudCwgJ211bHRpY29sb3InKTtcbiAgICB9XG5cbiAgICBsZXQgc2l6ZVZhbHVlID1cbiAgICAgIHRoaXMuc2l6ZSA9PT0gJ2JpZycgPyAnMTAwcHgnIDogdGhpcy5zaXplID09PSAnc21hbGwnID8gJzMwcHgnIDogJzY1cHgnO1xuICAgIHRoaXMucmVuZGVyZXIuc2V0QXR0cmlidXRlKHRoaXMuc3ZnLm5hdGl2ZUVsZW1lbnQsICd3aWR0aCcsIHNpemVWYWx1ZSk7XG4gICAgdGhpcy5yZW5kZXJlci5zZXRBdHRyaWJ1dGUodGhpcy5zdmcubmF0aXZlRWxlbWVudCwgJ2hlaWdodCcsIHNpemVWYWx1ZSk7XG4gIH1cbn1cbiJdfQ==