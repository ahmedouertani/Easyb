pipeline {
    agent any
    
    options {
        disableConcurrentBuilds()
        skipDefaultCheckout(true)
        skipStagesAfterUnstable()
        timestamps()
    }

    triggers {
        githubPush()
    }

    environment {
        registry = "bouhmiid/alpine"
        registryCredential = 'tanitlab'
        dockerImage = ''
        NEXUS_VERSION = "nexus3"
        NEXUS_PROTOCOL = "http"
        NEXUS_URL = "http://192.168.1.207:8081"
        NEXUS_REPOSITORY = "maven-nexus-repo"
        NEXUS_CREDENTIAL_ID = "nexus-user-credentials"
        NEXUS_SCRIPT = "maven-create-hosted"
        SONARQUBE_URL = "http://192.168.1.207:9000" // URL de votre instance SonarQube
    }

    stages {

                /*stage('Login and setup') {

            steps {

             sh 'echo $DOCKERHUB_CREDENTIALS_PSW | docker login -u $DOCKERHUB_CREDENTIALS_USR --password-stdin'

            }
        }*/
        stage('Checkout Git') {   //Récupération du code source
            steps {
                echo 'checking GitHub Repo'
                git branch: 'main',
                url: 'https://github.com/ahmedouertani/bqq.git'
            }
        }

                /*stage('Push to Git') {
  steps {
    sh 'git config --global user.email "ahmed.ouertani.2@esprit.tn"'
    sh 'git config --global user.name "ahmedouertani"'
    sh 'git add .'
    sh 'git commit -m "Automated commit by Jenkins"'
    sh 'git push https://github.com/ahmedouertani/bqq.git main' //
Utiliser l'URL HTTPS du référentiel Git
  }
}*/

        stage('Use Node.js') { //Installation de Node.JS
            steps {
                script {
                    nodejs = tool 'nodejs-16'
                    env.PATH = "${nodejs}/bin:${env.PATH}"
                }
            }
        }

        stage('Install dependencies') { //Installer les dépendances du projet
            steps {
                sh 'npm install'
            }
        }

                        /*stage('Run Lint') {
            steps {
                sh 'npm run lint'
            }
        }*/
        /*stage('Sonar Scanner Coverage') {
        sh "npm run sonar"
    } */

/*stage('Make Prod Build') {
        bat 'npx ng build --prod --base-href=/frontend/ && cd
dist/frontend && jar -cvf frontend.war *'
    }



        stage('Build app') {
            steps {
                sh 'npm run build:prod'
            }
        }*/


/*stage('Sonarqube') {
    steps {
            sh 'mvn sonar:sonar -Dsonar.login=admin -Dsonar.password=bouhmidenaey97' // Exécuter l'analyse SonarQube avec Maven et les informations d'authentification appropriées
        }
    }*/

     /*stage('SonarQube analysis') {
      steps {
        withSonarQubeEnv('SONARQUBE_TOKEN') {
          // Exécution de l'analyse SonarQube
          sh 'sonar-scanner' // Utilisation du scanner SonarQube pour analyser le code source
        }
      }
    }*/



        stage('Build Docker image') {
            steps {
                script {
                    def registry = 'bouhmiid/alpine'
                    def imageName = 'image2'
                    def imageTag = 'latest'
                    sh "docker build -t ${registry}/${imageName}:${imageTag} ."
                    sh "docker push ${registry}/${imageName}:${imageTag}"
                }
            }
        }

stage('Push Docker Image') {
            steps {
                withDockerRegistry([credentialsId: "docker_auth", url: "https://index.docker.io/v1/"]) {
                    bat "docker push IMAGE_NAME:latest"
                }
            }
        }

        stage('Upload artifact') {
            steps {
                script {
                    def artifacts = findFiles(glob: 'dist/**/*.js')
                    archiveArtifacts artifacts
                }
            }
        }
    }
    
    post {
        success {
            echo 'Success'
        }
        failure {
            echo 'Failure'
        }
    }
}
